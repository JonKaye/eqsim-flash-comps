<?xml version="1.0"?>
<docs>
  <book title="as files" directory="as files" language="en" version="1.0" sort="xyz">
    <level1 name="mx">
      <level2 name="fmxis">
        <level3 name="FMXISAlphaNum Class">
          <Class fullName="mx.fmxis.FMXISAlphaNum" level="4" />
        </level3>
        <level3 name="FMXISBar Class">
          <Class fullName="mx.fmxis.FMXISBar" level="4" />
        </level3>
        <level3 name="FMXISBarNonUnif Class">
          <Class fullName="mx.fmxis.FMXISBarNonUnif" level="4" />
        </level3>
        <level3 name="FMXISBarrelDial Class">
          <Class fullName="mx.fmxis.FMXISBarrelDial" level="4" />
        </level3>
        <level3 name="FMXISBase Class">
          <Class fullName="mx.fmxis.FMXISBase" level="4" />
        </level3>
        <level3 name="FMXISButton Class">
          <Class fullName="mx.fmxis.FMXISButton" level="4" />
        </level3>
        <level3 name="FMXISButtonMomentary Class">
          <Class fullName="mx.fmxis.FMXISButtonMomentary" level="4" />
        </level3>
        <level3 name="FMXISButtonMomentaryLabel Class">
          <Class fullName="mx.fmxis.FMXISButtonMomentaryLabel" level="4" />
        </level3>
        <level3 name="FMXISButtonRepeater Class">
          <Class fullName="mx.fmxis.FMXISButtonRepeater" level="4" />
        </level3>
        <level3 name="FMXISButtonToggle Class">
          <Class fullName="mx.fmxis.FMXISButtonToggle" level="4" />
        </level3>
        <level3 name="FMXISDigits Class">
          <Class fullName="mx.fmxis.FMXISDigits" level="4" />
        </level3>
        <level3 name="FMXISJog Class">
          <Class fullName="mx.fmxis.FMXISJog" level="4" />
        </level3>
        <level3 name="FMXISJoystick Class">
          <Class fullName="mx.fmxis.FMXISJoystick" level="4" />
        </level3>
        <level3 name="FMXISKeypad Class">
          <Class fullName="mx.fmxis.FMXISKeypad" level="4" />
        </level3>
        <level3 name="FMXISLamp Class">
          <Class fullName="mx.fmxis.FMXISLamp" level="4" />
        </level3>
        <level3 name="FMXISLampAttach Class">
          <Class fullName="mx.fmxis.FMXISLampAttach" level="4" />
        </level3>
        <level3 name="FMXISPotentiometer Class">
          <Class fullName="mx.fmxis.FMXISPotentiometer" level="4" />
        </level3>
        <level3 name="FMXISProxyListener Class">
          <Class fullName="mx.fmxis.FMXISProxyListener" level="4" />
        </level3>
        <level3 name="FMXISRoundDial Class">
          <Class fullName="mx.fmxis.FMXISRoundDial" level="4" />
        </level3>
        <level3 name="FMXISRoundDialSmooth Class">
          <Class fullName="mx.fmxis.FMXISRoundDialSmooth" level="4" />
        </level3>
        <level3 name="FMXISSectorDial Class">
          <Class fullName="mx.fmxis.FMXISSectorDial" level="4" />
        </level3>
        <level3 name="FMXISSectorDialSmooth Class">
          <Class fullName="mx.fmxis.FMXISSectorDialSmooth" level="4" />
        </level3>
        <level3 name="FMXISSlider Class">
          <Class fullName="mx.fmxis.FMXISSlider" level="4" />
        </level3>
        <level3 name="FMXISStopwatch Class">
          <Class fullName="mx.fmxis.FMXISStopwatch" level="4" />
        </level3>
        <level3 name="FMXISTimer Class">
          <Class fullName="mx.fmxis.FMXISTimer" level="4" />
        </level3>
      </level2>
    </level1>
  </book>
  <index>
    <section letter="_" />
    <item text="_cols">
      <link classFullName="mx.fmxis.FMXISKeypad" memberName="_cols" memberType="property" />
    </item>
    <item text="_pulseFreq">
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="_pulseFreq" memberType="property" />
    </item>
    <item text="_pulseID">
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="_pulseID" memberType="property" />
    </item>
    <item text="_rows">
      <link classFullName="mx.fmxis.FMXISKeypad" memberName="_rows" memberType="property" />
    </item>
    <section letter="A" />
    <item text="addEventListener">
      <link classFullName="mx.fmxis.FMXISBase" memberName="addEventListener" memberType="property" />
    </item>
    <item text="addListener">
      <link classFullName="mx.fmxis.FMXISBase" memberName="addListener" memberType="method" />
    </item>
    <item text="attachChildren">
      <link classFullName="mx.fmxis.FMXISSectorDial" memberName="attachChildren" memberType="method" />
      <link classFullName="mx.fmxis.FMXISRoundDial" memberName="attachChildren" memberType="method" />
    </item>
    <section letter="B" />
    <item text="barColorRange">
      <link classFullName="mx.fmxis.FMXISBar" memberName="barColorRange" memberType="property" />
    </item>
    <item text="barColors">
      <link classFullName="mx.fmxis.FMXISBar" memberName="barColors" memberType="property" />
    </item>
    <item text="barSpace">
      <link classFullName="mx.fmxis.FMXISBar" memberName="barSpace" memberType="property" />
    </item>
    <item text="baseID">
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="baseID" memberType="property" />
    </item>
    <item text="butIsUp">
      <link classFullName="mx.fmxis.FMXISButtonToggle" memberName="butIsUp" memberType="property" />
    </item>
    <item text="buttonEvents">
      <link classFullName="mx.fmxis.FMXISButtonToggle" memberName="buttonEvents" memberType="property" />
      <link classFullName="mx.fmxis.FMXISTimer" memberName="buttonEvents" memberType="property" />
      <link classFullName="mx.fmxis.FMXISButton" memberName="buttonEvents" memberType="property" />
    </item>
    <section letter="C" />
    <item text="centerEPS">
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="centerEPS" memberType="property" />
    </item>
    <item text="centerVis">
      <link classFullName="mx.fmxis.FMXISSectorDial" memberName="centerVis" memberType="property" />
      <link classFullName="mx.fmxis.FMXISRoundDial" memberName="centerVis" memberType="property" />
    </item>
    <item text="chipUnits">
      <link classFullName="mx.fmxis.FMXISBarNonUnif" memberName="chipUnits" memberType="property" />
    </item>
    <item text="className">
      <link classFullName="mx.fmxis.FMXISLampAttach" memberName="className" memberType="property" />
      <link classFullName="mx.fmxis.FMXISSlider" memberName="className" memberType="property" />
      <link classFullName="mx.fmxis.FMXISBase" memberName="className" memberType="property" />
      <link classFullName="mx.fmxis.FMXISButtonToggle" memberName="className" memberType="property" />
      <link classFullName="mx.fmxis.FMXISKeypad" memberName="className" memberType="property" />
      <link classFullName="mx.fmxis.FMXISButtonRepeater" memberName="className" memberType="property" />
      <link classFullName="mx.fmxis.FMXISDigits" memberName="className" memberType="property" />
      <link classFullName="mx.fmxis.FMXISButtonMomentaryLabel" memberName="className" memberType="property" />
      <link classFullName="mx.fmxis.FMXISJog" memberName="className" memberType="property" />
      <link classFullName="mx.fmxis.FMXISStopwatch" memberName="className" memberType="property" />
      <link classFullName="mx.fmxis.FMXISLamp" memberName="className" memberType="property" />
      <link classFullName="mx.fmxis.FMXISTimer" memberName="className" memberType="property" />
      <link classFullName="mx.fmxis.FMXISSectorDialSmooth" memberName="className" memberType="property" />
      <link classFullName="mx.fmxis.FMXISPotentiometer" memberName="className" memberType="property" />
      <link classFullName="mx.fmxis.FMXISBarrelDial" memberName="className" memberType="property" />
      <link classFullName="mx.fmxis.FMXISRoundDialSmooth" memberName="className" memberType="property" />
      <link classFullName="mx.fmxis.FMXISAlphaNum" memberName="className" memberType="property" />
      <link classFullName="mx.fmxis.FMXISBarNonUnif" memberName="className" memberType="property" />
      <link classFullName="mx.fmxis.FMXISSectorDial" memberName="className" memberType="property" />
      <link classFullName="mx.fmxis.FMXISButtonMomentary" memberName="className" memberType="property" />
      <link classFullName="mx.fmxis.FMXISRoundDial" memberName="className" memberType="property" />
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="className" memberType="property" />
      <link classFullName="mx.fmxis.FMXISButton" memberName="className" memberType="property" />
      <link classFullName="mx.fmxis.FMXISBar" memberName="className" memberType="property" />
    </item>
    <item text="clickSnd">
      <link classFullName="mx.fmxis.FMXISJog" memberName="clickSnd" memberType="property" />
    </item>
    <item text="clipParameters">
      <link classFullName="mx.fmxis.FMXISBase" memberName="clipParameters" memberType="property" />
      <link classFullName="mx.fmxis.FMXISButtonRepeater" memberName="clipParameters" memberType="property" />
    </item>
    <section letter="D" />
    <item text="decPl">
      <link classFullName="mx.fmxis.FMXISDigits" memberName="decPl" memberType="property" />
    </item>
    <item text="decrJog">
      <link classFullName="mx.fmxis.FMXISJog" memberName="decrJog" memberType="method" />
    </item>
    <item text="dialEvents">
      <link classFullName="mx.fmxis.FMXISSectorDialSmooth" memberName="dialEvents" memberType="property" />
      <link classFullName="mx.fmxis.FMXISBarrelDial" memberName="dialEvents" memberType="property" />
      <link classFullName="mx.fmxis.FMXISRoundDialSmooth" memberName="dialEvents" memberType="property" />
    </item>
    <item text="digEvents">
      <link classFullName="mx.fmxis.FMXISDigits" memberName="digEvents" memberType="property" />
    </item>
    <item text="digTint">
      <link classFullName="mx.fmxis.FMXISDigits" memberName="digTint" memberType="property" />
      <link classFullName="mx.fmxis.FMXISBarrelDial" memberName="digTint" memberType="property" />
    </item>
    <item text="discreteSteps">
      <link classFullName="mx.fmxis.FMXISJog" memberName="discreteSteps" memberType="property" />
    </item>
    <item text="display">
      <link classFullName="mx.fmxis.FMXISDigits" memberName="display" memberType="property" />
      <link classFullName="mx.fmxis.FMXISBarrelDial" memberName="display" memberType="property" />
    </item>
    <item text="displayLamp">
      <link classFullName="mx.fmxis.FMXISLampAttach" memberName="displayLamp" memberType="property" />
      <link classFullName="mx.fmxis.FMXISLamp" memberName="displayLamp" memberType="property" />
    </item>
    <item text="DownLinkID">
      <link classFullName="mx.fmxis.FMXISButtonMomentary" memberName="DownLinkID" memberType="property" />
    </item>
    <section letter="E" />
    <item text="evtChange">
      <link classFullName="mx.fmxis.FMXISSlider" memberName="evtChange" memberType="property" />
    </item>
    <item text="evtDragOut">
      <link classFullName="mx.fmxis.FMXISButton" memberName="evtDragOut" memberType="property" />
    </item>
    <item text="evtJChg">
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="evtJChg" memberType="property" />
    </item>
    <item text="evtJPulse">
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="evtJPulse" memberType="property" />
    </item>
    <item text="evtJReleased">
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="evtJReleased" memberType="property" />
    </item>
    <item text="evtJReturned">
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="evtJReturned" memberType="property" />
    </item>
    <item text="evtJStart">
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="evtJStart" memberType="property" />
    </item>
    <item text="evtKeyDown">
      <link classFullName="mx.fmxis.FMXISKeypad" memberName="evtKeyDown" memberType="property" />
    </item>
    <item text="evtKeyUp">
      <link classFullName="mx.fmxis.FMXISKeypad" memberName="evtKeyUp" memberType="property" />
    </item>
    <item text="evtOverflow">
      <link classFullName="mx.fmxis.FMXISDigits" memberName="evtOverflow" memberType="property" />
      <link classFullName="mx.fmxis.FMXISBarrelDial" memberName="evtOverflow" memberType="property" />
    </item>
    <item text="evtPress">
      <link classFullName="mx.fmxis.FMXISButton" memberName="evtPress" memberType="property" />
    </item>
    <item text="evtRelease">
      <link classFullName="mx.fmxis.FMXISButton" memberName="evtRelease" memberType="property" />
    </item>
    <item text="evtReleaseOutside">
      <link classFullName="mx.fmxis.FMXISButton" memberName="evtReleaseOutside" memberType="property" />
    </item>
    <item text="evtRollOut">
      <link classFullName="mx.fmxis.FMXISButton" memberName="evtRollOut" memberType="property" />
    </item>
    <item text="evtRollOver">
      <link classFullName="mx.fmxis.FMXISButton" memberName="evtRollOver" memberType="property" />
    </item>
    <item text="evtSet">
      <link classFullName="mx.fmxis.FMXISButtonToggle" memberName="evtSet" memberType="property" />
    </item>
    <item text="execEvent">
      <link classFullName="mx.fmxis.FMXISSlider" memberName="execEvent" memberType="method" />
      <link classFullName="mx.fmxis.FMXISButtonToggle" memberName="execEvent" memberType="method" />
      <link classFullName="mx.fmxis.FMXISKeypad" memberName="execEvent" memberType="method" />
      <link classFullName="mx.fmxis.FMXISJog" memberName="execEvent" memberType="method" />
      <link classFullName="mx.fmxis.FMXISPotentiometer" memberName="execEvent" memberType="method" />
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="execEvent" memberType="method" />
      <link classFullName="mx.fmxis.FMXISButton" memberName="execEvent" memberType="method" />
    </item>
    <section letter="F" />
    <item text="FMXISAlphaNum Class">
      <link classFullName="mx.fmxis.FMXISAlphaNum" />
    </item>
    <item text="FMXISBar Class">
      <link classFullName="mx.fmxis.FMXISBar" />
    </item>
    <item text="FMXISBarNonUnif Class">
      <link classFullName="mx.fmxis.FMXISBarNonUnif" />
    </item>
    <item text="FMXISBarrelDial Class">
      <link classFullName="mx.fmxis.FMXISBarrelDial" />
    </item>
    <item text="FMXISBase Class">
      <link classFullName="mx.fmxis.FMXISBase" />
    </item>
    <item text="FMXISButton Class">
      <link classFullName="mx.fmxis.FMXISButton" />
    </item>
    <item text="FMXISButtonMomentary Class">
      <link classFullName="mx.fmxis.FMXISButtonMomentary" />
    </item>
    <item text="FMXISButtonMomentaryLabel Class">
      <link classFullName="mx.fmxis.FMXISButtonMomentaryLabel" />
    </item>
    <item text="FMXISButtonRepeater Class">
      <link classFullName="mx.fmxis.FMXISButtonRepeater" />
    </item>
    <item text="FMXISButtonToggle Class">
      <link classFullName="mx.fmxis.FMXISButtonToggle" />
    </item>
    <item text="FMXISDigits Class">
      <link classFullName="mx.fmxis.FMXISDigits" />
    </item>
    <item text="FMXISJog Class">
      <link classFullName="mx.fmxis.FMXISJog" />
    </item>
    <item text="FMXISJoystick Class">
      <link classFullName="mx.fmxis.FMXISJoystick" />
    </item>
    <item text="FMXISKeypad Class">
      <link classFullName="mx.fmxis.FMXISKeypad" />
    </item>
    <item text="FMXISLamp">
      <link classFullName="mx.fmxis.FMXISLampAttach" memberName="FMXISLamp" memberType="method" />
    </item>
    <item text="FMXISLamp Class">
      <link classFullName="mx.fmxis.FMXISLamp" />
    </item>
    <item text="FMXISLampAttach Class">
      <link classFullName="mx.fmxis.FMXISLampAttach" />
    </item>
    <item text="FMXISPotentiometer Class">
      <link classFullName="mx.fmxis.FMXISPotentiometer" />
    </item>
    <item text="FMXISProxyListener Class">
      <link classFullName="mx.fmxis.FMXISProxyListener" />
    </item>
    <item text="FMXISRoundDial Class">
      <link classFullName="mx.fmxis.FMXISRoundDial" />
    </item>
    <item text="FMXISRoundDialSmooth Class">
      <link classFullName="mx.fmxis.FMXISRoundDialSmooth" />
    </item>
    <item text="FMXISSectorDial Class">
      <link classFullName="mx.fmxis.FMXISSectorDial" />
    </item>
    <item text="FMXISSectorDialSmooth Class">
      <link classFullName="mx.fmxis.FMXISSectorDialSmooth" />
    </item>
    <item text="FMXISSlider Class">
      <link classFullName="mx.fmxis.FMXISSlider" />
    </item>
    <item text="FMXISStopwatch Class">
      <link classFullName="mx.fmxis.FMXISStopwatch" />
    </item>
    <item text="FMXISTimer Class">
      <link classFullName="mx.fmxis.FMXISTimer" />
    </item>
    <item text="forceInt">
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="forceInt" memberType="property" />
    </item>
    <section letter="G" />
    <item text="getTime">
      <link classFullName="mx.fmxis.FMXISStopwatch" memberName="getTime" memberType="method" />
    </item>
    <item text="getVec">
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="getVec" memberType="method" />
    </item>
    <item text="gutClicks">
      <link classFullName="mx.fmxis.FMXISSlider" memberName="gutClicks" memberType="property" />
    </item>
    <section letter="H" />
    <item text="handleEvent">
      <link classFullName="mx.fmxis.FMXISProxyListener" memberName="handleEvent" memberType="method" />
    </item>
    <item text="holdDur">
      <link classFullName="mx.fmxis.FMXISKeypad" memberName="holdDur" memberType="property" />
    </item>
    <item text="hsID">
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="hsID" memberType="property" />
    </item>
    <section letter="I" />
    <item text="incrJog">
      <link classFullName="mx.fmxis.FMXISJog" memberName="incrJog" memberType="method" />
    </item>
    <item text="incrVal">
      <link classFullName="mx.fmxis.FMXISJog" memberName="incrVal" memberType="method" />
    </item>
    <item text="init">
      <link classFullName="mx.fmxis.FMXISBase" memberName="init" memberType="method" />
    </item>
    <item text="intvl">
      <link classFullName="mx.fmxis.FMXISTimer" memberName="intvl" memberType="property" />
    </item>
    <item text="isActive">
      <link classFullName="mx.fmxis.FMXISStopwatch" memberName="isActive" memberType="method" />
      <link classFullName="mx.fmxis.FMXISTimer" memberName="isActive" memberType="method" />
    </item>
    <section letter="J" />
    <item text="JogEvent">
      <link classFullName="mx.fmxis.FMXISJog" memberName="JogEvent" memberType="property" />
    </item>
    <item text="jstickEvents">
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="jstickEvents" memberType="property" />
    </item>
    <item text="justify">
      <link classFullName="mx.fmxis.FMXISButtonMomentaryLabel" memberName="justify" memberType="property" />
    </item>
    <section letter="K" />
    <item text="keyEvents">
      <link classFullName="mx.fmxis.FMXISKeypad" memberName="keyEvents" memberType="property" />
    </item>
    <item text="keyOffset">
      <link classFullName="mx.fmxis.FMXISKeypad" memberName="keyOffset" memberType="property" />
    </item>
    <item text="kSticky">
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="kSticky" memberType="property" />
    </item>
    <section letter="L" />
    <item text="lampBackID">
      <link classFullName="mx.fmxis.FMXISLampAttach" memberName="lampBackID" memberType="property" />
    </item>
    <item text="leadZero">
      <link classFullName="mx.fmxis.FMXISDigits" memberName="leadZero" memberType="property" />
    </item>
    <item text="left2right">
      <link classFullName="mx.fmxis.FMXISSectorDial" memberName="left2right" memberType="property" />
    </item>
    <item text="leftJust">
      <link classFullName="mx.fmxis.FMXISAlphaNum" memberName="leftJust" memberType="property" />
    </item>
    <item text="linkageIDs">
      <link classFullName="mx.fmxis.FMXISLampAttach" memberName="linkageIDs" memberType="property" />
    </item>
    <item text="LROffset">
      <link classFullName="mx.fmxis.FMXISButtonMomentaryLabel" memberName="LROffset" memberType="property" />
    </item>
    <item text="lstner">
      <link classFullName="mx.fmxis.FMXISProxyListener" memberName="lstner" memberType="property" />
    </item>
    <section letter="M" />
    <item text="maxAngle">
      <link classFullName="mx.fmxis.FMXISSectorDial" memberName="maxAngle" memberType="property" />
    </item>
    <item text="maxVal">
      <link classFullName="mx.fmxis.FMXISSlider" memberName="maxVal" memberType="property" />
      <link classFullName="mx.fmxis.FMXISPotentiometer" memberName="maxVal" memberType="property" />
      <link classFullName="mx.fmxis.FMXISSectorDial" memberName="maxVal" memberType="property" />
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="maxVal" memberType="property" />
      <link classFullName="mx.fmxis.FMXISBar" memberName="maxVal" memberType="property" />
    </item>
    <item text="minAngle">
      <link classFullName="mx.fmxis.FMXISSectorDial" memberName="minAngle" memberType="property" />
    </item>
    <item text="minVal">
      <link classFullName="mx.fmxis.FMXISSlider" memberName="minVal" memberType="property" />
      <link classFullName="mx.fmxis.FMXISPotentiometer" memberName="minVal" memberType="property" />
      <link classFullName="mx.fmxis.FMXISSectorDial" memberName="minVal" memberType="property" />
      <link classFullName="mx.fmxis.FMXISBar" memberName="minVal" memberType="property" />
    </item>
    <item text="moveHS">
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="moveHS" memberType="method" />
    </item>
    <section letter="N" />
    <item text="nBars">
      <link classFullName="mx.fmxis.FMXISBar" memberName="nBars" memberType="property" />
    </item>
    <item text="nIters">
      <link classFullName="mx.fmxis.FMXISTimer" memberName="nIters" memberType="property" />
    </item>
    <item text="numDigs">
      <link classFullName="mx.fmxis.FMXISDigits" memberName="numDigs" memberType="property" />
      <link classFullName="mx.fmxis.FMXISBarrelDial" memberName="numDigs" memberType="property" />
      <link classFullName="mx.fmxis.FMXISAlphaNum" memberName="numDigs" memberType="property" />
    </item>
    <item text="numDivs">
      <link classFullName="mx.fmxis.FMXISSlider" memberName="numDivs" memberType="property" />
    </item>
    <item text="numTicks">
      <link classFullName="mx.fmxis.FMXISJog" memberName="numTicks" memberType="property" />
    </item>
    <item text="nXScale">
      <link classFullName="mx.fmxis.FMXISSectorDial" memberName="nXScale" memberType="property" />
      <link classFullName="mx.fmxis.FMXISRoundDial" memberName="nXScale" memberType="property" />
    </item>
    <item text="nYScale">
      <link classFullName="mx.fmxis.FMXISSectorDial" memberName="nYScale" memberType="property" />
      <link classFullName="mx.fmxis.FMXISRoundDial" memberName="nYScale" memberType="property" />
    </item>
    <section letter="O" />
    <item text="onChange">
      <link classFullName="mx.fmxis.FMXISSlider" memberName="onChange" memberType="event" />
    </item>
    <item text="onDragOut">
      <link classFullName="mx.fmxis.FMXISButton" memberName="onDragOut" memberType="event" />
      <link classFullName="mx.fmxis.FMXISButton" memberName="onDragOut" memberType="method" />
    </item>
    <item text="onElapsed">
      <link classFullName="mx.fmxis.FMXISTimer" memberName="onElapsed" memberType="event" />
    </item>
    <item text="onJChg">
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="onJChg" memberType="event" />
    </item>
    <item text="onJPulse">
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="onJPulse" memberType="event" />
    </item>
    <item text="onJReleased">
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="onJReleased" memberType="event" />
    </item>
    <item text="onJReturned">
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="onJReturned" memberType="event" />
    </item>
    <item text="onJStart">
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="onJStart" memberType="event" />
    </item>
    <item text="onKeyDown">
      <link classFullName="mx.fmxis.FMXISKeypad" memberName="onKeyDown" memberType="event" />
    </item>
    <item text="onKeyUp">
      <link classFullName="mx.fmxis.FMXISKeypad" memberName="onKeyUp" memberType="event" />
    </item>
    <item text="onOverflow">
      <link classFullName="mx.fmxis.FMXISDigits" memberName="onOverflow" memberType="event" />
      <link classFullName="mx.fmxis.FMXISBarrelDial" memberName="onOverflow" memberType="event" />
    </item>
    <item text="onPress">
      <link classFullName="mx.fmxis.FMXISButtonToggle" memberName="onPress" memberType="method" />
      <link classFullName="mx.fmxis.FMXISButton" memberName="onPress" memberType="event" />
      <link classFullName="mx.fmxis.FMXISButton" memberName="onPress" memberType="method" />
    </item>
    <item text="onPulse">
      <link classFullName="mx.fmxis.FMXISStopwatch" memberName="onPulse" memberType="event" />
    </item>
    <item text="onRelease">
      <link classFullName="mx.fmxis.FMXISButton" memberName="onRelease" memberType="event" />
      <link classFullName="mx.fmxis.FMXISButton" memberName="onRelease" memberType="method" />
    </item>
    <item text="onReleaseOutside">
      <link classFullName="mx.fmxis.FMXISButton" memberName="onReleaseOutside" memberType="event" />
      <link classFullName="mx.fmxis.FMXISButton" memberName="onReleaseOutside" memberType="method" />
    </item>
    <item text="onRollOut">
      <link classFullName="mx.fmxis.FMXISButton" memberName="onRollOut" memberType="event" />
      <link classFullName="mx.fmxis.FMXISButton" memberName="onRollOut" memberType="method" />
    </item>
    <item text="onRollOver">
      <link classFullName="mx.fmxis.FMXISButton" memberName="onRollOver" memberType="event" />
      <link classFullName="mx.fmxis.FMXISButton" memberName="onRollOver" memberType="method" />
    </item>
    <item text="onSet">
      <link classFullName="mx.fmxis.FMXISButtonToggle" memberName="onSet" memberType="event" />
    </item>
    <item text="onTargReach">
      <link classFullName="mx.fmxis.FMXISSectorDialSmooth" memberName="onTargReach" memberType="event" />
      <link classFullName="mx.fmxis.FMXISRoundDialSmooth" memberName="onTargReach" memberType="event" />
    </item>
    <item text="onUnset">
      <link classFullName="mx.fmxis.FMXISButtonToggle" memberName="onUnset" memberType="event" />
    </item>
    <item text="onValChg">
      <link classFullName="mx.fmxis.FMXISJog" memberName="onValChg" memberType="event" />
    </item>
    <section letter="P" />
    <item text="pause">
      <link classFullName="mx.fmxis.FMXISStopwatch" memberName="pause" memberType="method" />
    </item>
    <item text="pressKey">
      <link classFullName="mx.fmxis.FMXISKeypad" memberName="pressKey" memberType="method" />
    </item>
    <item text="pulseFreq">
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="pulseFreq" memberType="property" />
    </item>
    <item text="pulseInt">
      <link classFullName="mx.fmxis.FMXISStopwatch" memberName="pulseInt" memberType="property" />
    </item>
    <section letter="R" />
    <item text="releaseKey">
      <link classFullName="mx.fmxis.FMXISKeypad" memberName="releaseKey" memberType="method" />
    </item>
    <item text="removeEventListener">
      <link classFullName="mx.fmxis.FMXISBase" memberName="removeEventListener" memberType="property" />
    </item>
    <item text="removeListener">
      <link classFullName="mx.fmxis.FMXISBase" memberName="removeListener" memberType="method" />
    </item>
    <item text="repFreq">
      <link classFullName="mx.fmxis.FMXISKeypad" memberName="repFreq" memberType="property" />
    </item>
    <item text="reset">
      <link classFullName="mx.fmxis.FMXISStopwatch" memberName="reset" memberType="method" />
      <link classFullName="mx.fmxis.FMXISTimer" memberName="reset" memberType="method" />
    </item>
    <item text="resetKeysToUp">
      <link classFullName="mx.fmxis.FMXISKeypad" memberName="resetKeysToUp" memberType="method" />
    </item>
    <item text="rollUp">
      <link classFullName="mx.fmxis.FMXISBarrelDial" memberName="rollUp" memberType="property" />
    </item>
    <section letter="S" />
    <item text="setColor">
      <link classFullName="mx.fmxis.FMXISBarrelDial" memberName="setColor" memberType="method" />
    </item>
    <item text="setDownTile">
      <link classFullName="mx.fmxis.FMXISButtonMomentary" memberName="setDownTile" memberType="method" />
    </item>
    <item text="setGrid">
      <link classFullName="mx.fmxis.FMXISKeypad" memberName="setGrid" memberType="method" />
    </item>
    <item text="setNumUnits">
      <link classFullName="mx.fmxis.FMXISRoundDial" memberName="setNumUnits" memberType="method" />
    </item>
    <item text="setTargVal">
      <link classFullName="mx.fmxis.FMXISSectorDialSmooth" memberName="setTargVal" memberType="method" />
      <link classFullName="mx.fmxis.FMXISRoundDialSmooth" memberName="setTargVal" memberType="method" />
    </item>
    <item text="setUpTile">
      <link classFullName="mx.fmxis.FMXISButtonMomentary" memberName="setUpTile" memberType="method" />
    </item>
    <item text="setVal">
      <link classFullName="mx.fmxis.FMXISPotentiometer" memberName="setVal" memberType="method" />
    </item>
    <item text="setValQuiet">
      <link classFullName="mx.fmxis.FMXISSlider" memberName="setValQuiet" memberType="method" />
    </item>
    <item text="setVec">
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="setVec" memberType="method" />
    </item>
    <item text="showBack">
      <link classFullName="mx.fmxis.FMXISSectorDial" memberName="showBack" memberType="property" />
      <link classFullName="mx.fmxis.FMXISRoundDial" memberName="showBack" memberType="property" />
    </item>
    <item text="showBkgnd">
      <link classFullName="mx.fmxis.FMXISDigits" memberName="showBkgnd" memberType="property" />
      <link classFullName="mx.fmxis.FMXISBarrelDial" memberName="showBkgnd" memberType="property" />
    </item>
    <item text="showButs">
      <link classFullName="mx.fmxis.FMXISJog" memberName="showButs" memberType="property" />
    </item>
    <item text="showHand">
      <link classFullName="mx.fmxis.FMXISSlider" memberName="showHand" memberType="property" />
      <link classFullName="mx.fmxis.FMXISKeypad" memberName="showHand" memberType="property" />
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="showHand" memberType="property" />
      <link classFullName="mx.fmxis.FMXISButton" memberName="showHand" memberType="property" />
    </item>
    <item text="showTicks">
      <link classFullName="mx.fmxis.FMXISSlider" memberName="showTicks" memberType="property" />
      <link classFullName="mx.fmxis.FMXISJog" memberName="showTicks" memberType="property" />
    </item>
    <item text="sliderEvents">
      <link classFullName="mx.fmxis.FMXISSlider" memberName="sliderEvents" memberType="property" />
    </item>
    <item text="snap2Int">
      <link classFullName="mx.fmxis.FMXISJog" memberName="snap2Int" memberType="property" />
    </item>
    <item text="start">
      <link classFullName="mx.fmxis.FMXISStopwatch" memberName="start" memberType="method" />
      <link classFullName="mx.fmxis.FMXISTimer" memberName="start" memberType="method" />
    </item>
    <item text="stickID">
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="stickID" memberType="property" />
    </item>
    <item text="stopMoveHS">
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="stopMoveHS" memberType="method" />
    </item>
    <item text="swEvents">
      <link classFullName="mx.fmxis.FMXISStopwatch" memberName="swEvents" memberType="property" />
    </item>
    <item text="symbolName">
      <link classFullName="mx.fmxis.FMXISLampAttach" memberName="symbolName" memberType="property" />
      <link classFullName="mx.fmxis.FMXISSlider" memberName="symbolName" memberType="property" />
      <link classFullName="mx.fmxis.FMXISBase" memberName="symbolName" memberType="property" />
      <link classFullName="mx.fmxis.FMXISButtonToggle" memberName="symbolName" memberType="property" />
      <link classFullName="mx.fmxis.FMXISKeypad" memberName="symbolName" memberType="property" />
      <link classFullName="mx.fmxis.FMXISButtonRepeater" memberName="symbolName" memberType="property" />
      <link classFullName="mx.fmxis.FMXISDigits" memberName="symbolName" memberType="property" />
      <link classFullName="mx.fmxis.FMXISButtonMomentaryLabel" memberName="symbolName" memberType="property" />
      <link classFullName="mx.fmxis.FMXISJog" memberName="symbolName" memberType="property" />
      <link classFullName="mx.fmxis.FMXISStopwatch" memberName="symbolName" memberType="property" />
      <link classFullName="mx.fmxis.FMXISLamp" memberName="symbolName" memberType="property" />
      <link classFullName="mx.fmxis.FMXISTimer" memberName="symbolName" memberType="property" />
      <link classFullName="mx.fmxis.FMXISSectorDialSmooth" memberName="symbolName" memberType="property" />
      <link classFullName="mx.fmxis.FMXISPotentiometer" memberName="symbolName" memberType="property" />
      <link classFullName="mx.fmxis.FMXISBarrelDial" memberName="symbolName" memberType="property" />
      <link classFullName="mx.fmxis.FMXISRoundDialSmooth" memberName="symbolName" memberType="property" />
      <link classFullName="mx.fmxis.FMXISAlphaNum" memberName="symbolName" memberType="property" />
      <link classFullName="mx.fmxis.FMXISBarNonUnif" memberName="symbolName" memberType="property" />
      <link classFullName="mx.fmxis.FMXISSectorDial" memberName="symbolName" memberType="property" />
      <link classFullName="mx.fmxis.FMXISButtonMomentary" memberName="symbolName" memberType="property" />
      <link classFullName="mx.fmxis.FMXISRoundDial" memberName="symbolName" memberType="property" />
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="symbolName" memberType="property" />
      <link classFullName="mx.fmxis.FMXISButton" memberName="symbolName" memberType="property" />
      <link classFullName="mx.fmxis.FMXISBar" memberName="symbolName" memberType="property" />
    </item>
    <item text="symbolOwner">
      <link classFullName="mx.fmxis.FMXISLampAttach" memberName="symbolOwner" memberType="property" />
      <link classFullName="mx.fmxis.FMXISSlider" memberName="symbolOwner" memberType="property" />
      <link classFullName="mx.fmxis.FMXISBase" memberName="symbolOwner" memberType="property" />
      <link classFullName="mx.fmxis.FMXISButtonToggle" memberName="symbolOwner" memberType="property" />
      <link classFullName="mx.fmxis.FMXISKeypad" memberName="symbolOwner" memberType="property" />
      <link classFullName="mx.fmxis.FMXISButtonRepeater" memberName="symbolOwner" memberType="property" />
      <link classFullName="mx.fmxis.FMXISDigits" memberName="symbolOwner" memberType="property" />
      <link classFullName="mx.fmxis.FMXISButtonMomentaryLabel" memberName="symbolOwner" memberType="property" />
      <link classFullName="mx.fmxis.FMXISJog" memberName="symbolOwner" memberType="property" />
      <link classFullName="mx.fmxis.FMXISStopwatch" memberName="symbolOwner" memberType="property" />
      <link classFullName="mx.fmxis.FMXISLamp" memberName="symbolOwner" memberType="property" />
      <link classFullName="mx.fmxis.FMXISTimer" memberName="symbolOwner" memberType="property" />
      <link classFullName="mx.fmxis.FMXISSectorDialSmooth" memberName="symbolOwner" memberType="property" />
      <link classFullName="mx.fmxis.FMXISPotentiometer" memberName="symbolOwner" memberType="property" />
      <link classFullName="mx.fmxis.FMXISBarrelDial" memberName="symbolOwner" memberType="property" />
      <link classFullName="mx.fmxis.FMXISRoundDialSmooth" memberName="symbolOwner" memberType="property" />
      <link classFullName="mx.fmxis.FMXISAlphaNum" memberName="symbolOwner" memberType="property" />
      <link classFullName="mx.fmxis.FMXISBarNonUnif" memberName="symbolOwner" memberType="property" />
      <link classFullName="mx.fmxis.FMXISSectorDial" memberName="symbolOwner" memberType="property" />
      <link classFullName="mx.fmxis.FMXISButtonMomentary" memberName="symbolOwner" memberType="property" />
      <link classFullName="mx.fmxis.FMXISRoundDial" memberName="symbolOwner" memberType="property" />
      <link classFullName="mx.fmxis.FMXISJoystick" memberName="symbolOwner" memberType="property" />
      <link classFullName="mx.fmxis.FMXISButton" memberName="symbolOwner" memberType="property" />
      <link classFullName="mx.fmxis.FMXISBar" memberName="symbolOwner" memberType="property" />
    </item>
    <section letter="T" />
    <item text="targVal">
      <link classFullName="mx.fmxis.FMXISSectorDialSmooth" memberName="targVal" memberType="property" />
      <link classFullName="mx.fmxis.FMXISRoundDialSmooth" memberName="targVal" memberType="property" />
    </item>
    <item text="text">
      <link classFullName="mx.fmxis.FMXISButtonMomentaryLabel" memberName="text" memberType="property" />
    </item>
    <item text="tint1">
      <link classFullName="mx.fmxis.FMXISLamp" memberName="tint1" memberType="property" />
    </item>
    <item text="tint2">
      <link classFullName="mx.fmxis.FMXISLamp" memberName="tint2" memberType="property" />
    </item>
    <item text="tline">
      <link classFullName="mx.fmxis.FMXISProxyListener" memberName="tline" memberType="property" />
    </item>
    <section letter="U" />
    <item text="units">
      <link classFullName="mx.fmxis.FMXISJog" memberName="units" memberType="property" />
    </item>
    <item text="UpLinkID">
      <link classFullName="mx.fmxis.FMXISButtonMomentary" memberName="UpLinkID" memberType="property" />
    </item>
    <section letter="V" />
    <item text="val">
      <link classFullName="mx.fmxis.FMXISSlider" memberName="val" memberType="property" />
      <link classFullName="mx.fmxis.FMXISDigits" memberName="val" memberType="property" />
      <link classFullName="mx.fmxis.FMXISJog" memberName="val" memberType="property" />
      <link classFullName="mx.fmxis.FMXISSectorDialSmooth" memberName="val" memberType="property" />
      <link classFullName="mx.fmxis.FMXISBarrelDial" memberName="val" memberType="property" />
      <link classFullName="mx.fmxis.FMXISRoundDialSmooth" memberName="val" memberType="property" />
      <link classFullName="mx.fmxis.FMXISAlphaNum" memberName="val" memberType="property" />
      <link classFullName="mx.fmxis.FMXISSectorDial" memberName="val" memberType="property" />
      <link classFullName="mx.fmxis.FMXISRoundDial" memberName="val" memberType="property" />
      <link classFullName="mx.fmxis.FMXISBar" memberName="val" memberType="property" />
    </item>
    <item text="vChg">
      <link classFullName="mx.fmxis.FMXISJog" memberName="vChg" memberType="property" />
    </item>
    <section letter="X" />
    <item text="xSpacing">
      <link classFullName="mx.fmxis.FMXISKeypad" memberName="xSpacing" memberType="property" />
    </item>
    <item text="XYOffset">
      <link classFullName="mx.fmxis.FMXISButtonMomentaryLabel" memberName="XYOffset" memberType="property" />
    </item>
    <section letter="Y" />
    <item text="ySpacing">
      <link classFullName="mx.fmxis.FMXISKeypad" memberName="ySpacing" memberType="property" />
    </item>
  </index>
  <packages>
    <package name="">
      <commentTags>
        <commentTag name="book-title">as files</commentTag>
        <commentTag name="book-directory">as files</commentTag>
        <commentTag name="book-language">en</commentTag>
        <commentTag name="book-version">1.0</commentTag>
        <commentTag name="book-sort">xyz</commentTag>
      </commentTags>
    </package>
    <package name="mx.fmxis" />
  </packages>
  <classes>
    <class name="FMXISLampAttach" package="mx.fmxis" fullName="mx.fmxis.FMXISLampAttach" extends="mx.fmxis.FMXISBase" src="C:\Documents and Settings\All Users\Documents\Toreador\fmxis\as files\FMXISLampAttach.as">
      <description>&lt;p&gt;This class implements a multi-state lamp (indicator) with attached graphics.  Users can change the
appearance by changing the &lt;i&gt;defLampXGraphic&lt;/i&gt; and &lt;i&gt;defLampXBkgnd&lt;/i&gt; movie clips
in the Library, or the linkage ID's of each state.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class generates no events, but it inherits from FMXISBase for consistency with the component
library.&lt;/p&gt;</description>
      <commentTags>
        <commentTag name="summary">&lt;p&gt;This class implements a multi-state lamp (indicator) with attached graphics.</commentTag>
        <commentTag name="class">FMXISLampAttach</commentTag>
        <commentTag name="codehint">_lampAttach</commentTag>
        <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
        <commentTag name="tooltip">Multi-state lamp</commentTag>
      </commentTags>
      <metaTags>
        <metaTag metaTagName="IconFile">
          <unnamedValues>
            <unnamedValue>lampAttach.png</unnamedValue>
          </unnamedValues>
          <description>&lt;p&gt;This class implements a multi-state lamp (indicator) with attached graphics.  Users can change the
appearance by changing the &lt;i&gt;defLampXGraphic&lt;/i&gt; and &lt;i&gt;defLampXBkgnd&lt;/i&gt; movie clips
in the Library, or the linkage ID's of each state.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class generates no events, but it inherits from FMXISBase for consistency with the component
library.&lt;/p&gt;</description>
          <commentTags>
            <commentTag name="summary">&lt;p&gt;This class implements a multi-state lamp (indicator) with attached graphics.</commentTag>
            <commentTag name="class">FMXISLampAttach</commentTag>
            <commentTag name="codehint">_lampAttach</commentTag>
            <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
            <commentTag name="tooltip">Multi-state lamp</commentTag>
          </commentTags>
        </metaTag>
        <metaTag metaTagName="InspectableList">
          <unnamedValues>
            <unnamedValue>lampBackID</unnamedValue>
            <unnamedValue>linkageIDs</unnamedValue>
            <unnamedValue>displayLamp</unnamedValue>
          </unnamedValues>
        </metaTag>
      </metaTags>
      <properties>
        <property name="lampBackID" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="Linkage ID of background" defaultValue="" />
          </metaTags>
        </property>
        <property name="symbolOwner" type="Object" fullType="Object" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="displayLamp" type="Number" fullType="Number" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Index of linkage ID to display" defaultValue="0" />
          </metaTags>
        </property>
        <property name="className" type="String" fullType="String" readable="true" writable="true" isField="true" />
        <property name="symbolName" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="linkageIDs" type="Array" fullType="Array" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Array" name="Lamp states Linkage IDs" />
          </metaTags>
        </property>
      </properties>
      <inheritedProperties>
        <properties fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <property name="addEventListener" />
          <property name="removeEventListener" />
          <property name="clipParameters" />
        </properties>
      </inheritedProperties>
      <methods>
        <method name="FMXISLamp" type="" fullType="">
          <params />
        </method>
      </methods>
      <inheritedMethods>
        <methods fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <method name="init" />
          <method name="addListener" />
          <method name="removeListener" />
        </methods>
      </inheritedMethods>
      <inheritedEvents />
      <inheritedStyles />
    </class>
    <class name="FMXISSlider" package="mx.fmxis" fullName="mx.fmxis.FMXISSlider" extends="mx.fmxis.FMXISBase" src="C:\Documents and Settings\All Users\Documents\Toreador\fmxis\as files\FMXISSlider.as">
      <description>Event generated when the indicator reaches a new value.  The value passed in the event is the new value
of the slider.</description>
      <commentTags>
        <commentTag name="summary">Event generated when the indicator reaches a new value.</commentTag>
        <commentTag name="event">onChange</commentTag>
      </commentTags>
      <metaTags>
        <metaTag metaTagName="IconFile">
          <unnamedValues>
            <unnamedValue>slider.png</unnamedValue>
          </unnamedValues>
          <description>&lt;p&gt;This class implements a simple horizontal slider.  Users can change the appearance by modifying:&lt;/p&gt;
&lt;li&gt;&lt;code&gt;defSliderBkgnd&lt;/code&gt; - gutter along which slider slides&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defSliderSide&lt;/code&gt; - left and right sides of the slider&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defSliderIndicator&lt;/code&gt; - the indicator (button)&lt;/li&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class has one event, but can be changed in the component property panel or programmatically:
"onChange" on change.  Value is new value.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;This class inherits from FMXISBase to get listener capabilities.&lt;/p&gt;</description>
          <commentTags>
            <commentTag name="summary">&lt;p&gt;This class implements a simple horizontal slider.</commentTag>
            <commentTag name="class">FMXISSlider</commentTag>
            <commentTag name="codehint">_slider</commentTag>
            <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
            <commentTag name="tooltip">Slider</commentTag>
          </commentTags>
        </metaTag>
      </metaTags>
      <properties>
        <property name="symbolOwner" type="Object" fullType="Object" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="maxVal" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Maximum value for the slider.  Use &lt;code&gt;setMinMax()&lt;/code&gt; to change the value.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Maximum value for the slider.</commentTag>
            <commentTag name="property">maxVal</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="maximum value" defaultValue="100" />
          </metaTags>
        </property>
        <property name="className" type="String" fullType="String" readable="true" writable="true" isField="true" />
        <property name="sliderEvents" type="Array" fullType="Array" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="minVal" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Minimum value for the slider.  Use &lt;code&gt;setMinMax()&lt;/code&gt; to change the value.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Minimum value for the slider.</commentTag>
            <commentTag name="property">minVal</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="minimum value" defaultValue="0" />
          </metaTags>
        </property>
        <property name="val" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Current slider value.  Set this property to move the indicator programmatically, or use
it to retrieve the current indicator position.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Current slider value.</commentTag>
            <commentTag name="property">val</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="indicator position" defaultValue="50" />
          </metaTags>
        </property>
        <property name="gutClicks" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Boolean property saying whether to allow value change on gutter clicks or not.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Boolean property saying whether to allow value change on gutter clicks or not.</commentTag>
            <commentTag name="property">gutClicks</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Boolean" name="Allow gutter clicks" defaultValue="true" />
          </metaTags>
        </property>
        <property name="numDivs" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Number of divisions, for discrete slider (and tick marks).</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Number of divisions, for discrete slider (and tick marks).</commentTag>
            <commentTag name="property">numDivs</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Number of tick intervals" defaultValue="10" />
          </metaTags>
        </property>
        <property name="symbolName" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="showHand" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Boolean property indicating whether or not to display the hand cursor when the cursor is
over the hit area of this component.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Boolean property indicating whether or not to display the hand cursor when the cursor is
over the hit area of this component.</commentTag>
            <commentTag name="property">showHand</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Boolean" name="Show Hand Cursor" defaultValue="true" />
          </metaTags>
        </property>
        <property name="evtChange" type="String" fullType="String" readable="true" writable="true" isField="true">
          <description>The name of the event.  Change this programmatically to change the event name.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">The name of the event.</commentTag>
            <commentTag name="property">evtChange</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="onChange method name" defaultValue="onChange" />
          </metaTags>
        </property>
        <property name="showTicks" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Boolean property indicating whether or not to show tick marks.  Tick marks are really only
for placement, as you really should hand-design slider backgrounds for best effect.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Boolean property indicating whether or not to show tick marks.</commentTag>
            <commentTag name="property">showTicks</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Boolean" name="Show tick marks" defaultValue="false" />
          </metaTags>
        </property>
      </properties>
      <inheritedProperties>
        <properties fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <property name="addEventListener" />
          <property name="removeEventListener" />
          <property name="clipParameters" />
        </properties>
      </inheritedProperties>
      <methods>
        <method name="setValQuiet" type="" fullType="">
          <description>This method is used to set the indicator value without generating an event.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">This method is used to set the indicator value without generating an event.</commentTag>
            <commentTag name="method">setValQuiet</commentTag>
            <commentTag name="param" ref="v">New value</commentTag>
          </commentTags>
          <params>
            <param name="v" type="" fullType="" />
          </params>
        </method>
        <method name="execEvent" type="Void" fullType="Void">
          <description>Given an event string and value that matches what this component would generate, perform the action.
For the slider component, the event is onChange and the value is the new value.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Given an event string and value that matches what this component would generate, perform the action.</commentTag>
            <commentTag name="method">execEvent</commentTag>
            <commentTag name="param" ref="evName">Event name (string) must match the event this component generates</commentTag>
            <commentTag name="param" ref="evVal">(optional) value accompanying the event (if the event has an accompanying value)</commentTag>
            <commentTag name="param" ref="quiet">(optional) set this to true if component should perform the action but not generate an event (this should be false or undefined, unless you know what you are doing)</commentTag>
            <commentTag name="example">mySlider.execEvent("onChange", 10); // sets the slider to value 10</commentTag>
          </commentTags>
          <params>
            <param name="evName" type="String" fullType="String" />
            <param name="evVal" type="" fullType="" />
            <param name="q" type="Boolean" fullType="Boolean" />
          </params>
        </method>
      </methods>
      <inheritedMethods>
        <methods fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <method name="init" />
          <method name="addListener" />
          <method name="removeListener" />
        </methods>
      </inheritedMethods>
      <events>
        <event name="onChange" />
      </events>
      <inheritedEvents />
      <inheritedStyles />
    </class>
    <class name="FMXISBase" package="mx.fmxis" fullName="mx.fmxis.FMXISBase" extends="mx.core.UIComponent" src="C:\Documents and Settings\All Users\Documents\Toreador\fmxis\as files\FMXISBase.as">
      <description>&lt;p&gt;Components call this method when they want to generate an event.  The one parameter is
an object with at least two properties defined: &lt;code&gt;type&lt;/code&gt; (the event name), and &lt;code&gt;target&lt;/code&gt;,
the component instance.  For space efficiency, FMXISBase defines a single object, called &lt;code&gt;eventObj&lt;/code&gt;,
that components can reuse as the event instance (simply change the event name and any other properties you
want to pass to the event handler).&lt;/p&gt;
&lt;p&gt;This method is provided by mx.events.EventDispatcher.&lt;/p&gt;</description>
      <commentTags>
        <commentTag name="summary">&lt;p&gt;Components call this method when they want to generate an event.</commentTag>
        <commentTag name="method">dispatchEvent</commentTag>
        <commentTag name="param" ref="eventName">String name of the event to listen for</commentTag>
        <commentTag name="param" ref="inst">Listener instance</commentTag>
      </commentTags>
      <properties>
        <property name="symbolOwner" type="Object" fullType="Object" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="addEventListener" type="Function" fullType="Function" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="public" />
          </attributes>
        </property>
        <property name="removeEventListener" type="Function" fullType="Function" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="public" />
          </attributes>
        </property>
        <property name="className" type="String" fullType="String" readable="true" writable="true" isField="true" />
        <property name="symbolName" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="clipParameters" type="Object" fullType="Object" readable="true" writable="true" isField="true" />
      </properties>
      <methods>
        <method name="init" type="" fullType="">
          <params>
            <param name="evts" type="" fullType="" />
          </params>
        </method>
        <method name="addListener" type="" fullType="">
          <description>Register the listener programmatically to receive &lt;b&gt;all&lt;/b&gt; events for this component.
We can accept the listener if it is an instance name (use addEventListener directly)
or the string name of the listener (then we add a proxy listener).</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Register the listener programmatically to receive &lt;b&gt;all&lt;/b&gt; events for this component.</commentTag>
            <commentTag name="method">addListener</commentTag>
            <commentTag name="param" ref="lstner">The listener's instance or string name (with or without relative or absolute path)</commentTag>
          </commentTags>
          <params>
            <param name="lstnr" type="" fullType="" />
          </params>
        </method>
        <method name="removeListener" type="" fullType="">
          <description>Remove the listener from this component's event notification list.  Inside, we see if the listener specified
is an instance or a string, then call the appropriate removal routine to clean up.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Remove the listener from this component's event notification list.</commentTag>
            <commentTag name="method">removeListener</commentTag>
            <commentTag name="param" ref="lstnr" />
          </commentTags>
          <params>
            <param name="lstnr" type="" fullType="" />
          </params>
        </method>
      </methods>
    </class>
    <class name="FMXISButtonToggle" package="mx.fmxis" fullName="mx.fmxis.FMXISButtonToggle" extends="mx.fmxis.FMXISBase" src="C:\Documents and Settings\All Users\Documents\Toreador\fmxis\as files\FMXISButtonToggle.as">
      <description>&lt;p&gt;This class implements a simple toggle button.  Users can change the
appearance by changing the &lt;i&gt;defaultButTogUp&lt;/i&gt; and &lt;i&gt;defaultButTogDn&lt;/i&gt; movie clips
in the Library.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class has two events, by default called:&lt;/p&gt;
&lt;li&gt;&lt;code&gt;onSet&lt;/code&gt; - Generated when button goes from up to down position&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onUnset&lt;/code&gt; - Generated when button goes from down to up position&lt;/li&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The event names can be changed (if desired) in the component property inspector or on initialization through
the &lt;code&gt;initObject&lt;/code&gt; of &lt;code&gt;attachMovie()&lt;/code&gt;.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;This class inherits from FMXISBase to get listener capabilities.&lt;/p&gt;</description>
      <commentTags>
        <commentTag name="summary">&lt;p&gt;This class implements a simple toggle button.</commentTag>
        <commentTag name="class">FMXISButtonToggle</commentTag>
        <commentTag name="codehint">_butTog</commentTag>
        <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
        <commentTag name="tooltip">Simple momentary button</commentTag>
      </commentTags>
      <metaTags>
        <metaTag metaTagName="IconFile">
          <unnamedValues>
            <unnamedValue>buttonToggle.png</unnamedValue>
          </unnamedValues>
          <description>&lt;p&gt;This class implements a simple toggle button.  Users can change the
appearance by changing the &lt;i&gt;defaultButTogUp&lt;/i&gt; and &lt;i&gt;defaultButTogDn&lt;/i&gt; movie clips
in the Library.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class has two events, by default called:&lt;/p&gt;
&lt;li&gt;&lt;code&gt;onSet&lt;/code&gt; - Generated when button goes from up to down position&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onUnset&lt;/code&gt; - Generated when button goes from down to up position&lt;/li&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The event names can be changed (if desired) in the component property inspector or on initialization through
the &lt;code&gt;initObject&lt;/code&gt; of &lt;code&gt;attachMovie()&lt;/code&gt;.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;This class inherits from FMXISBase to get listener capabilities.&lt;/p&gt;</description>
          <commentTags>
            <commentTag name="summary">&lt;p&gt;This class implements a simple toggle button.</commentTag>
            <commentTag name="class">FMXISButtonToggle</commentTag>
            <commentTag name="codehint">_butTog</commentTag>
            <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
            <commentTag name="tooltip">Simple momentary button</commentTag>
          </commentTags>
        </metaTag>
      </metaTags>
      <properties>
        <property name="symbolOwner" type="Object" fullType="Object" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="butIsUp" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Whether the button is in the up (unset) position -- true -- on first viewing, or
in the down (set) position -- false.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Whether the button is in the up (unset) position -- true -- on first viewing, or
in the down (set) position -- false.</commentTag>
            <commentTag name="property">butIsUp</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Boolean" name="Start in Up Position" defaultValue="true" />
          </metaTags>
        </property>
        <property name="evtSet" type="String" fullType="String" readable="true" writable="true" isField="true">
          <description>Event name for when button is put in the set (down) position.  Change this value
at any time.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Event name for when button is put in the set (down) position.</commentTag>
            <commentTag name="property">evtSet</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="onSet method name" defaultValue="onSet" />
          </metaTags>
        </property>
        <property name="className" type="String" fullType="String" readable="true" writable="true" isField="true" />
        <property name="buttonEvents" type="Array" fullType="Array" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="symbolName" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
      </properties>
      <inheritedProperties>
        <properties fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <property name="addEventListener" />
          <property name="removeEventListener" />
          <property name="clipParameters" />
        </properties>
      </inheritedProperties>
      <methods>
        <method name="execEvent" type="" fullType="">
          <description>This method is used to programmatically invoke an action of the component based on
the event passed in.  When a user invokes an action, like presses a button, the button
generates an onPress event.  This method does the opposite -- given an onPress event, this
the method visually depresses the button.  This is typically used to simulate the user invoking the action.</description>
          <commentTags>
            <commentTag name="summary">This method is used to programmatically invoke an action of the component based on
the event passed in.</commentTag>
            <commentTag name="method">execEvent</commentTag>
            <commentTag name="param" ref="evtName">Event name (string) must match the event this component generates</commentTag>
            <commentTag name="param" ref="evtVal">Event value (for button, this value is ignored)</commentTag>
            <commentTag name="param" ref="quietly">Boolean true to invoke action without generating the event, false or not given at all to allow event to be generated</commentTag>
          </commentTags>
          <params>
            <param name="evtName" type="" fullType="" />
            <param name="evtVal" type="" fullType="" />
            <param name="q" type="" fullType="" />
          </params>
        </method>
        <method name="onPress" type="" fullType="">
          <description>Called to invoke action of pressing the button.</description>
          <commentTags>
            <commentTag name="summary">Called to invoke action of pressing the button.</commentTag>
            <commentTag name="method">onPress</commentTag>
            <commentTag name="param" ref="quietly">Boolean property indicating whether or not to suppress the event generation as a
result of the action.  Defaults to false (don't suppress event).</commentTag>
          </commentTags>
          <params>
            <param name="q" type="Boolean" fullType="Boolean" />
          </params>
        </method>
      </methods>
      <inheritedMethods>
        <methods fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <method name="init" />
          <method name="addListener" />
          <method name="removeListener" />
        </methods>
      </inheritedMethods>
      <events>
        <event name="onUnset" />
        <event name="onSet">
          <description>Event generated when button goes from the down to up position.</description>
          <commentTags>
            <commentTag name="summary">Event generated when button goes from the down to up position.</commentTag>
            <commentTag name="event">onUnset</commentTag>
          </commentTags>
        </event>
      </events>
      <inheritedEvents />
      <inheritedStyles />
    </class>
    <class name="FMXISKeypad" package="mx.fmxis" fullName="mx.fmxis.FMXISKeypad" extends="mx.fmxis.FMXISBase" src="C:\Documents and Settings\All Users\Documents\Toreador\fmxis\as files\FMXISKeypad.as">
      <description>&lt;p&gt;This class implements a keyboard arranged in a grid.  Users can change the
appearance of buttons by changing the following graphics:&lt;/p&gt;
&lt;li&gt;&lt;code&gt;defKeypadKey&lt;/code&gt; - graphic for keys in up and down positions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defKeypadCharsUp&lt;/code&gt; - ggraphic overlay for keys in up position&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defKeypadCharsDown&lt;/code&gt; - ggraphic overlay for keys in down position&lt;/li&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class has the following events:&lt;/p&gt;
&lt;li&gt;&lt;code&gt;onKeyUp&lt;/code&gt; Key pressed.  Value is object with properties &lt;code&gt;num&lt;/code&gt; (index) and &lt;code&gt;char&lt;/code&gt; (string character)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onKeyDown&lt;/code&gt; Key released.  Value is same as onKeyUp&lt;/li&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;Key-down (&lt;code&gt;onKeyDown&lt;/code&gt;, unless changed by the developer)
repeats at &lt;code&gt;repFreq&lt;/code&gt; frequency when a key is held down longer than &lt;code&gt;holdDur&lt;/code&gt; milliseconds.
Unlike a physical
keyboard, it also allows
you to show an offset of the overlay clips (the key labels) instead of all at once.  This
can be used to simulate a series of keys whose labels change.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;If you have set a non-zero offset, then the number returned in the event still corresponds to
the row and column position (0 is first), but the component returns the character from
the character array respecting the offset.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;This class inherits from FMXISBase to get listener capabilities.&lt;/p&gt;</description>
      <commentTags>
        <commentTag name="summary">&lt;p&gt;This class implements a keyboard arranged in a grid.</commentTag>
        <commentTag name="class">FMXISKeypad</commentTag>
        <commentTag name="codehint">_kpad</commentTag>
        <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
        <commentTag name="tooltip">Simple keypad with repeater keys</commentTag>
      </commentTags>
      <metaTags>
        <metaTag metaTagName="IconFile">
          <unnamedValues>
            <unnamedValue>keypad.png</unnamedValue>
          </unnamedValues>
          <description>&lt;p&gt;This class implements a keyboard arranged in a grid.  Users can change the
appearance of buttons by changing the following graphics:&lt;/p&gt;
&lt;li&gt;&lt;code&gt;defKeypadKey&lt;/code&gt; - graphic for keys in up and down positions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defKeypadCharsUp&lt;/code&gt; - ggraphic overlay for keys in up position&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defKeypadCharsDown&lt;/code&gt; - ggraphic overlay for keys in down position&lt;/li&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class has the following events:&lt;/p&gt;
&lt;li&gt;&lt;code&gt;onKeyUp&lt;/code&gt; Key pressed.  Value is object with properties &lt;code&gt;num&lt;/code&gt; (index) and &lt;code&gt;char&lt;/code&gt; (string character)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onKeyDown&lt;/code&gt; Key released.  Value is same as onKeyUp&lt;/li&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;Key-down (&lt;code&gt;onKeyDown&lt;/code&gt;, unless changed by the developer)
repeats at &lt;code&gt;repFreq&lt;/code&gt; frequency when a key is held down longer than &lt;code&gt;holdDur&lt;/code&gt; milliseconds.
Unlike a physical
keyboard, it also allows
you to show an offset of the overlay clips (the key labels) instead of all at once.  This
can be used to simulate a series of keys whose labels change.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;If you have set a non-zero offset, then the number returned in the event still corresponds to
the row and column position (0 is first), but the component returns the character from
the character array respecting the offset.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;This class inherits from FMXISBase to get listener capabilities.&lt;/p&gt;</description>
          <commentTags>
            <commentTag name="summary">&lt;p&gt;This class implements a keyboard arranged in a grid.</commentTag>
            <commentTag name="class">FMXISKeypad</commentTag>
            <commentTag name="codehint">_kpad</commentTag>
            <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
            <commentTag name="tooltip">Simple keypad with repeater keys</commentTag>
          </commentTags>
        </metaTag>
      </metaTags>
      <properties>
        <property name="symbolOwner" type="Object" fullType="Object" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="className" type="String" fullType="String" readable="true" writable="true" isField="true" />
        <property name="ySpacing" type="" fullType="" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Key spacing in Y dimension" defaultValue="0" />
          </metaTags>
        </property>
        <property name="keyOffset" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Which index should be first displayed in series stored in Up and Down Chars
movie clips</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Which index should be first displayed in series stored in Up and Down Chars
movie clips</commentTag>
            <commentTag name="property">keyOffset</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Initial label offset" defaultValue="0" />
          </metaTags>
        </property>
        <property name="repFreq" type="Number" fullType="Number" readable="true" writable="true" isField="true">
          <description># of millisconds to repeat onKeyDown's, after key has been down &lt;code&gt;holdDur&lt;/code&gt;
(so long as &lt;code&gt;holdDur&lt;/code&gt; is not -1).</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary"># of millisconds to repeat onKeyDown's, after key has been down &lt;code&gt;holdDur&lt;/code&gt;
(so long as &lt;code&gt;holdDur&lt;/code&gt; is not -1).</commentTag>
            <commentTag name="property">repFreq</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Repetition frequency" defaultValue="100" />
          </metaTags>
        </property>
        <property name="_rows" type="Number" fullType="Number" readable="true" writable="true" isField="true">
          <description>Number of rows of keys.  Use &lt;code&gt;setGrid()&lt;/code&gt; to change the # of rows at runtime.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Number of rows of keys.</commentTag>
            <commentTag name="property">_rows</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Number of rows" defaultValue="4" />
          </metaTags>
        </property>
        <property name="xSpacing" type="" fullType="" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Key spacing in X dimension" defaultValue="0" />
          </metaTags>
        </property>
        <property name="evtKeyDown" type="String" fullType="String" readable="true" writable="true" isField="true">
          <description>Name of the on-key-down event sent to listeners when a key is pressed and when it is repeated.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Name of the on-key-down event sent to listeners when a key is pressed and when it is repeated.</commentTag>
            <commentTag name="property">evtKeyDown</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="onKeyDown method name" defaultValue="onKeyDown" />
          </metaTags>
        </property>
        <property name="holdDur" type="Number" fullType="Number" readable="true" writable="true" isField="true">
          <description># of milliseconds after which we repeat key down events.  If this value is set to -1,
then the component does not repeat key down events.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary"># of milliseconds after which we repeat key down events.</commentTag>
            <commentTag name="property">holdDur</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Pause before repeat" defaultValue="250" />
          </metaTags>
        </property>
        <property name="_cols" type="Number" fullType="Number" readable="true" writable="true" isField="true">
          <description>Number of columns of keys. Use &lt;code&gt;setGrid()&lt;/code&gt; to change the # of rows at runtime.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Number of columns of keys.</commentTag>
            <commentTag name="property">_cols</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Number of columns" defaultValue="3" />
          </metaTags>
        </property>
        <property name="keyEvents" type="Array" fullType="Array" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="symbolName" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="evtKeyUp" type="String" fullType="String" readable="true" writable="true" isField="true">
          <description>Name of the on-key-up event sent to listeners when a key is released.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Name of the on-key-up event sent to listeners when a key is released.</commentTag>
            <commentTag name="property">evtKeyUp</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="onKeyUp method name" defaultValue="onKeyUp" />
          </metaTags>
        </property>
        <property name="showHand" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Boolean property indicating whether or not to display the hand cursor when the cursor is
over the hit area of a key.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Boolean property indicating whether or not to display the hand cursor when the cursor is
over the hit area of a key.</commentTag>
            <commentTag name="property">showHand</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Boolean" name="Show Hand Cursor" defaultValue="true" />
          </metaTags>
        </property>
      </properties>
      <inheritedProperties>
        <properties fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <property name="addEventListener" />
          <property name="removeEventListener" />
          <property name="clipParameters" />
        </properties>
      </inheritedProperties>
      <methods>
        <method name="resetKeysToUp" type="" fullType="">
          <attributes>
            <attribute value="public" />
          </attributes>
          <params>
            <param name="q" type="" fullType="" />
          </params>
        </method>
        <method name="pressKey" type="" fullType="">
          <description>Simulate the pressing of key &lt;code&gt;knum&lt;/code&gt;.</description>
          <commentTags>
            <commentTag name="summary">Simulate the pressing of key &lt;code&gt;knum&lt;/code&gt;.</commentTag>
            <commentTag name="method">pressKey</commentTag>
            <commentTag name="param" ref="knum">Index of key to press</commentTag>
            <commentTag name="example">myKeypad.pressKey(2); // simulate pressing the third key (row major) in the keypad</commentTag>
          </commentTags>
          <params>
            <param name="knum" type="" fullType="" />
            <param name="q" type="" fullType="" />
          </params>
        </method>
        <method name="execEvent" type="Void" fullType="Void">
          <description>Given an event string and value that matches what this component would generate, perform the action.
For the keypad component, the events are onKeyDown and onKeyUp, and the value is an object
with a num (index) position and character.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Given an event string and value that matches what this component would generate, perform the action.</commentTag>
            <commentTag name="method">execEvent</commentTag>
            <commentTag name="param" ref="evName">Event name (string) must match the event this component generates</commentTag>
            <commentTag name="param" ref="evVal">(optional) value accompanying the event (if the event has an accompanying value)</commentTag>
            <commentTag name="param" ref="quiet">(optional) set this to true if component should perform the action but not generate an event (this should be false or undefined, unless you know what you are doing)</commentTag>
            <commentTag name="example">myKeypad.execEvent("onKeyDown", {num:0} ); // presses the top left key</commentTag>
          </commentTags>
          <params>
            <param name="evName" type="String" fullType="String" />
            <param name="evVal" type="" fullType="" />
            <param name="q" type="Boolean" fullType="Boolean" />
          </params>
        </method>
        <method name="setGrid" type="" fullType="">
          <description>This method is for resetting the grid at runtime to a new grid configuration.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">This method is for resetting the grid at runtime to a new grid configuration.</commentTag>
            <commentTag name="method">setGrid</commentTag>
            <commentTag name="param" ref="rows">Number of rows</commentTag>
            <commentTag name="param" ref="cols">Number of columns</commentTag>
            <commentTag name="param" ref="chars">(optional) New character set array</commentTag>
            <commentTag name="param" ref="noKeys">(optional) Array of key indexes where keys should not appear (row major).  If you pass this in but don't want to change &lt;code&gt;chars&lt;/code&gt;, pass &lt;code&gt;undefined&lt;/code&gt; for chars.</commentTag>
            <commentTag name="example">myKeypad.setGrid(3, 2); // reset to 3x2 grid
myKeypad.setGrid(2, 2, undefined, [2, 3]); // reset to 2x2 grid with keys 3 and 4 missing</commentTag>
          </commentTags>
          <params>
            <param name="r" type="" fullType="" />
            <param name="c" type="" fullType="" />
            <param name="chars" type="" fullType="" />
            <param name="nk" type="" fullType="" />
          </params>
        </method>
        <method name="releaseKey" type="" fullType="">
          <description>Simulate the releasing of key &lt;code&gt;knum&lt;/code&gt;.</description>
          <commentTags>
            <commentTag name="summary">Simulate the releasing of key &lt;code&gt;knum&lt;/code&gt;.</commentTag>
            <commentTag name="method">releaseKey</commentTag>
            <commentTag name="param" ref="knum">Index of key to release</commentTag>
            <commentTag name="param" ref="quiet">(optional) set this to true if component should perform the action but not generate an event (this should be false or undefined, unless you know what you are doing)</commentTag>
            <commentTag name="example">myKeypad.releaseKey(2); // simulate releasing the third key (row major) in the keypad</commentTag>
          </commentTags>
          <params>
            <param name="knum" type="" fullType="" />
            <param name="q" type="" fullType="" />
          </params>
        </method>
      </methods>
      <inheritedMethods>
        <methods fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <method name="init" />
          <method name="addListener" />
          <method name="removeListener" />
        </methods>
      </inheritedMethods>
      <events>
        <event name="onKeyDown" />
        <event name="onKeyUp">
          <description>&lt;p&gt;Event generated when user presses a key, and repeatedly if the key is held down for longer
than &lt;code&gt;holdDur&lt;/code&gt; milliseconds (repeated at &lt;code&gt;repFreq&lt;/code&gt; millisecond frequency).&lt;/p&gt;
&lt;p&gt;The event value is an object with properties &lt;code&gt;num&lt;/code&gt; (index) and &lt;code&gt;char&lt;/code&gt; (string character).  The
index corresponds to the row and column position (row major order) of the key on the screen.
If you have set a non-zero offset, then the number returned in the event still corresponds to
the row and column position (0 is first), but the component returns the character from
the character array respecting the offset.&lt;/p&gt;</description>
          <commentTags>
            <commentTag name="summary">&lt;p&gt;Event generated when user presses a key, and repeatedly if the key is held down for longer
than &lt;code&gt;holdDur&lt;/code&gt; milliseconds (repeated at &lt;code&gt;repFreq&lt;/code&gt; millisecond frequency).&lt;/p&gt;
&lt;p&gt;The event value is an object with properties &lt;code&gt;num&lt;/code&gt; (index) and &lt;code&gt;char&lt;/code&gt; (string character).</commentTag>
            <commentTag name="event">onKeyDown</commentTag>
          </commentTags>
        </event>
      </events>
      <inheritedEvents />
      <inheritedStyles />
    </class>
    <class name="FMXISButtonRepeater" package="mx.fmxis" fullName="mx.fmxis.FMXISButtonRepeater" extends="mx.fmxis.FMXISButton" src="C:\Documents and Settings\All Users\Documents\Toreador\fmxis\as files\FMXISButtonRepeater.as">
      <description>&lt;p&gt;This class implements a simple momentary push button that is capable of
generating repeated, button down events (onPress) given a waiting period and frequency.
Users can change the
appearance by changing the &lt;i&gt;defaultButUp&lt;/i&gt; and &lt;i&gt;defaultButDn&lt;/i&gt; movie clips
in the Library.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class has six events, by default called:&lt;/p&gt;
&lt;li&gt;&lt;code&gt;onPress&lt;/code&gt; - Generated when button first pressed, and repeated at specified frequency&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onRelease&lt;/code&gt; - Generated when button released&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onReleaseOutside&lt;/code&gt; - Generated when button released outside confines of the hit area&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onRollOver&lt;/code&gt; - Generated when cursor rolls over button hit area&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onRollOut&lt;/code&gt; - Generated when cursor rolls out of button hit area&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onDragOut&lt;/code&gt; - Generated when cursor rolls out of button hit area while left mouse button down&lt;/li&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The event names can be changed (if desired) in the component property inspector or on initialization through
the &lt;code&gt;initObject&lt;/code&gt; of &lt;code&gt;attachMovie()&lt;/code&gt;.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;This class inherits from FMXISButton to get basic button capabilities.&lt;/p&gt;</description>
      <commentTags>
        <commentTag name="summary">&lt;p&gt;This class implements a simple momentary push button that is capable of
generating repeated, button down events (onPress) given a waiting period and frequency.</commentTag>
        <commentTag name="class">FMXISButton</commentTag>
        <commentTag name="codehint">_bRep</commentTag>
        <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
        <commentTag name="tooltip">Simple momentary button with repeat-on-down event</commentTag>
      </commentTags>
      <properties>
        <property name="symbolOwner" type="Object" fullType="Object" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="className" type="String" fullType="String" readable="true" writable="true" isField="true" />
        <property name="symbolName" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="clipParameters" type="Object" fullType="Object" readable="true" writable="true" isField="true" />
      </properties>
      <inheritedProperties>
        <properties fromName="FMXISButton" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISButton">
          <property name="showHand" />
          <property name="evtReleaseOutside" />
          <property name="buttonEvents" />
          <property name="evtRelease" />
          <property name="evtRollOver" />
          <property name="evtPress" />
          <property name="evtRollOut" />
          <property name="evtDragOut" />
        </properties>
        <properties fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <property name="addEventListener" />
          <property name="removeEventListener" />
        </properties>
      </inheritedProperties>
      <methods />
      <inheritedMethods>
        <methods fromName="FMXISButton" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISButton">
          <method name="execEvent" />
          <method name="onRollOver" />
          <method name="onRollOut" />
          <method name="onReleaseOutside" />
          <method name="onDragOut" />
          <method name="onRelease" />
          <method name="onPress" />
        </methods>
        <methods fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <method name="init" />
          <method name="addListener" />
          <method name="removeListener" />
        </methods>
      </inheritedMethods>
      <inheritedEvents>
        <events fromName="FMXISButton" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISButton">
          <event name="onReleaseOutside" />
          <event name="onRelease" />
          <event name="onRollOver" />
          <event name="onDragOut" />
          <event name="onRollOut" />
          <event name="onPress" />
        </events>
      </inheritedEvents>
      <inheritedStyles />
    </class>
    <class name="FMXISDigits" package="mx.fmxis" fullName="mx.fmxis.FMXISDigits" extends="mx.fmxis.FMXISBase" src="C:\Documents and Settings\All Users\Documents\Toreador\fmxis\as files\FMXISDigits.as">
      <description>Event generated when numeric value is larger (whole numbers) than what can fit in the display to
the left of the decimal point. Negative numbers consume one digit to represent the negative sign.</description>
      <commentTags>
        <commentTag name="summary">Event generated when numeric value is larger (whole numbers) than what can fit in the display to
the left of the decimal point.</commentTag>
        <commentTag name="event">onOverflow</commentTag>
      </commentTags>
      <metaTags>
        <metaTag metaTagName="IconFile">
          <unnamedValues>
            <unnamedValue>digits.png</unnamedValue>
          </unnamedValues>
        </metaTag>
      </metaTags>
      <properties>
        <property name="showBkgnd" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Whether or not to display the background graphic.  This can be set only in
the component property panel.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Whether or not to display the background graphic.</commentTag>
            <commentTag name="property">showBkgnd</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Boolean" name="Show background" defaultValue="true" />
          </metaTags>
        </property>
        <property name="symbolOwner" type="Object" fullType="Object" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="leadZero" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Boolean property true or false, whether or not to pad left of decimal point with 0's.
This can be set only in the component parameter panel.  Use &lt;code&gt;chgLeadZero()&lt;/code&gt; to set
it programmatically.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Boolean property true or false, whether or not to pad left of decimal point with 0's.</commentTag>
            <commentTag name="property">leadZero</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Boolean" name="Pad with 0's" defaultValue="false" />
          </metaTags>
        </property>
        <property name="decPl" type="" fullType="" readable="true" writable="true" isField="false">
          <description>A getter/setter property used to set and retrieve the number of decimal places
(to the right of the decimal point).</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">A getter/setter property used to set and retrieve the number of decimal places
(to the right of the decimal point).</commentTag>
            <commentTag name="property">decPl</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Number of decimal places" defaultValue="1" />
          </metaTags>
        </property>
        <property name="digTint" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Color of each digit.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Color of each digit.</commentTag>
            <commentTag name="property">digTint</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Color" name="Digit color" defaultValue="#00FF00" />
          </metaTags>
        </property>
        <property name="numDigs" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Number of digits.  This can be set only in the component property panel.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Number of digits.</commentTag>
            <commentTag name="property">numDigs</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Number of digits" defaultValue="1" />
          </metaTags>
        </property>
        <property name="display" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Whether or not to display the digit value.  This is used to simulate the
display on (true) or off (false).</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Whether or not to display the digit value.</commentTag>
            <commentTag name="property">display</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Boolean" name="Display on" defaultValue="true" />
          </metaTags>
        </property>
        <property name="className" type="String" fullType="String" readable="true" writable="true" isField="true" />
        <property name="digEvents" type="Array" fullType="Array" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="evtOverflow" type="String" fullType="String" readable="true" writable="true" isField="true">
          <description>Event name for event generated if the value of the display (whole number) exceeds the
number of positions to the left of the decimal point.  Negative numbers consume one
digit to represent the negative sign.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Event name for event generated if the value of the display (whole number) exceeds the
number of positions to the left of the decimal point.</commentTag>
            <commentTag name="property">evtOverflow</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="onOverflow method name" defaultValue="onOverflow" />
          </metaTags>
        </property>
        <property name="val" type="" fullType="" readable="true" writable="true" isField="false">
          <description>A getter/setter property used to set and retrieve the digital display's value.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">A getter/setter property used to set and retrieve the digital display's value.</commentTag>
            <commentTag name="property">val</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Starting value" defaultValue="0" />
          </metaTags>
        </property>
        <property name="symbolName" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
      </properties>
      <inheritedProperties>
        <properties fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <property name="addEventListener" />
          <property name="removeEventListener" />
          <property name="clipParameters" />
        </properties>
      </inheritedProperties>
      <methods />
      <inheritedMethods>
        <methods fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <method name="init" />
          <method name="addListener" />
          <method name="removeListener" />
        </methods>
      </inheritedMethods>
      <events>
        <event name="onOverflow">
          <description>&lt;p&gt;This class implements a simple digital display (positive and negative
numbers, as integers or floating point).&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
Users can change the appearance by modifying:
&lt;li&gt;&lt;code&gt;defDigBkgnd&lt;/code&gt; - background&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defDigGfx&lt;/code&gt; - clip with digits used&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defDigDecPt&lt;/code&gt; - decimal point graphic&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defDigPlusBkgnd&lt;/code&gt; - movie clip that contains digits, background, and decimal point&lt;/li&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class has one event -- "DigOverflow", indicating value cannot be represented in the specified
number of digits.  This occurs on positive and negative values that do not
fit in the display window (negative numbers require one more digit for the minus sign).
The value is passed to the handler as the event value.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;This class inherits from FMXISBase to get listener capabilities.&lt;/p&gt;</description>
          <commentTags>
            <commentTag name="summary">&lt;p&gt;This class implements a simple digital display (positive and negative
numbers, as integers or floating point).&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
Users can change the appearance by modifying:
&lt;li&gt;&lt;code&gt;defDigBkgnd&lt;/code&gt; - background&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defDigGfx&lt;/code&gt; - clip with digits used&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defDigDecPt&lt;/code&gt; - decimal point graphic&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defDigPlusBkgnd&lt;/code&gt; - movie clip that contains digits, background, and decimal point&lt;/li&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class has one event -- "DigOverflow", indicating value cannot be represented in the specified
number of digits.</commentTag>
            <commentTag name="class">FMXISDigits</commentTag>
            <commentTag name="codehint">_digs</commentTag>
            <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
            <commentTag name="tooltip">Simple digital display</commentTag>
          </commentTags>
        </event>
      </events>
      <inheritedEvents />
      <inheritedStyles />
    </class>
    <class name="FMXISButtonMomentaryLabel" package="mx.fmxis" fullName="mx.fmxis.FMXISButtonMomentaryLabel" extends="mx.fmxis.FMXISButtonMomentary" src="C:\Documents and Settings\All Users\Documents\Toreador\fmxis\as files\FMXISButtonMomentaryLabel.as">
      <description>&lt;p&gt;This class extends FMXISButtonMomentary (momentary button with repeat-on-down functionality)
to allow developers to add a text label placed over the button.  Users can change the
appearance by changing the &lt;i&gt;defaultButUp&lt;/i&gt; and &lt;i&gt;defaultButDn&lt;/i&gt; movie clips
in the Library.&lt;/p&gt;</description>
      <commentTags>
        <commentTag name="summary">&lt;p&gt;This class extends FMXISButtonMomentary (momentary button with repeat-on-down functionality)
to allow developers to add a text label placed over the button.</commentTag>
        <commentTag name="class">FMXISButtonMomentaryLabel</commentTag>
        <commentTag name="codehint">_bMomLabel</commentTag>
        <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
        <commentTag name="tooltip">Simple momentary button with user-defined label</commentTag>
      </commentTags>
      <metaTags>
        <metaTag metaTagName="IconFile">
          <unnamedValues>
            <unnamedValue>buttonMomentary.png</unnamedValue>
          </unnamedValues>
          <description>&lt;p&gt;This class extends FMXISButtonMomentary (momentary button with repeat-on-down functionality)
to allow developers to add a text label placed over the button.  Users can change the
appearance by changing the &lt;i&gt;defaultButUp&lt;/i&gt; and &lt;i&gt;defaultButDn&lt;/i&gt; movie clips
in the Library.&lt;/p&gt;</description>
          <commentTags>
            <commentTag name="summary">&lt;p&gt;This class extends FMXISButtonMomentary (momentary button with repeat-on-down functionality)
to allow developers to add a text label placed over the button.</commentTag>
            <commentTag name="class">FMXISButtonMomentaryLabel</commentTag>
            <commentTag name="codehint">_bMomLabel</commentTag>
            <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
            <commentTag name="tooltip">Simple momentary button with user-defined label</commentTag>
          </commentTags>
        </metaTag>
      </metaTags>
      <properties>
        <property name="XYOffset" type="Number" fullType="Number" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="XY text-down offset" defaultValue="4" />
          </metaTags>
        </property>
        <property name="symbolOwner" type="Object" fullType="Object" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="symbolName" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="LROffset" type="Number" fullType="Number" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Left-Right Justify Offset" defaultValue="0" />
          </metaTags>
        </property>
        <property name="className" type="String" fullType="String" readable="true" writable="true" isField="true" />
        <property name="justify" type="String" fullType="String" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" enumeration="left,center,right&quot;&quot;center" type="List" name="Justify" />
          </metaTags>
        </property>
        <property name="text" type="String" fullType="String" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="Text" defaultValue="Label" />
          </metaTags>
        </property>
      </properties>
      <inheritedProperties>
        <properties fromName="FMXISButtonMomentary" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISButtonMomentary">
          <property name="UpLinkID" />
          <property name="DownLinkID" />
        </properties>
        <properties fromName="FMXISButtonRepeater" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISButtonRepeater">
          <property name="clipParameters" />
        </properties>
        <properties fromName="FMXISButton" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISButton">
          <property name="showHand" />
          <property name="evtReleaseOutside" />
          <property name="buttonEvents" />
          <property name="evtRelease" />
          <property name="evtRollOver" />
          <property name="evtPress" />
          <property name="evtRollOut" />
          <property name="evtDragOut" />
        </properties>
        <properties fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <property name="addEventListener" />
          <property name="removeEventListener" />
        </properties>
      </inheritedProperties>
      <methods />
      <inheritedMethods>
        <methods fromName="FMXISButtonMomentary" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISButtonMomentary">
          <method name="setDownTile" />
          <method name="setUpTile" />
        </methods>
        <methods fromName="FMXISButton" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISButton">
          <method name="execEvent" />
          <method name="onRollOver" />
          <method name="onRollOut" />
          <method name="onReleaseOutside" />
          <method name="onDragOut" />
          <method name="onRelease" />
          <method name="onPress" />
        </methods>
        <methods fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <method name="init" />
          <method name="addListener" />
          <method name="removeListener" />
        </methods>
      </inheritedMethods>
      <inheritedEvents>
        <events fromName="FMXISButton" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISButton">
          <event name="onReleaseOutside" />
          <event name="onRelease" />
          <event name="onRollOver" />
          <event name="onDragOut" />
          <event name="onRollOut" />
          <event name="onPress" />
        </events>
      </inheritedEvents>
      <inheritedStyles />
    </class>
    <class name="FMXISJog" package="mx.fmxis" fullName="mx.fmxis.FMXISJog" extends="mx.fmxis.FMXISBase" src="C:\Documents and Settings\All Users\Documents\Toreador\fmxis\as files\FMXISJog.as">
      <description>&lt;p&gt;This class implements a simple jog.  Developers can set the increment, number of positions
in one cycle, integer vs. discrete, and whether the jog is adjusted by clicking and dragging,
or merely moving in a circular motion (&lt;code&gt;dragOrOver&lt;/code&gt;).&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
Developers can change the appearance by modifying:
&lt;li&gt;&lt;code&gt;defJogBkgnd&lt;/code&gt; - background&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defJogIndicator&lt;/code&gt; - indicator clip&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defJogIncr&lt;/code&gt; - Increment button (increments by 1 unit)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defJogDecr&lt;/code&gt; - Decrement button (decrements by 1 unit)&lt;/li&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class also has one property that developers can set in the component property panel,
&lt;code&gt;indLinkID&lt;/code&gt;, that replaces the default indicator graphic with a movie clip from
the Library specified by the linkage ID supplied.  The movie clip must have its center at
the center of rotation, so if the developer simply wants to change the indicator (notch), then the
indicator should be placed in the topmost (pointing up) position at the edge of the background.  When
a linkage ID is given, the component scales the background graphic to the maximum dimension of the indicator
movie clip, so the hit area (determined by the background) is correct.  Usually, the developer will
want to turn off the background graphic (using the property in the component property panel).&lt;/p&gt;
&lt;p&gt;The class has one event, by default called "onValChg" (but this can
be changed in the property inspector, or by changing the &lt;code&gt;vChg&lt;/code&gt; property), and
the value is the increment that
the jog was moved.  The &lt;code&gt;drawTicks&lt;/code&gt; property, if true, tells the component
to draw &lt;code&gt;numTicks&lt;/code&gt; ticks.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The position of the jog indicator can be set using the &lt;code&gt;val&lt;/code&gt; property.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;This class inherits from &lt;code&gt;FMXISBase&lt;/code&gt; to get listener capabilities.&lt;/p&gt;</description>
      <commentTags>
        <commentTag name="summary">&lt;p&gt;This class implements a simple jog.</commentTag>
        <commentTag name="class">FMXISJog</commentTag>
        <commentTag name="codehint">_jog</commentTag>
        <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
        <commentTag name="tooltip">Jog knob</commentTag>
      </commentTags>
      <metaTags>
        <metaTag metaTagName="IconFile">
          <unnamedValues>
            <unnamedValue>jog.png</unnamedValue>
          </unnamedValues>
          <description>&lt;p&gt;This class implements a simple jog.  Developers can set the increment, number of positions
in one cycle, integer vs. discrete, and whether the jog is adjusted by clicking and dragging,
or merely moving in a circular motion (&lt;code&gt;dragOrOver&lt;/code&gt;).&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
Developers can change the appearance by modifying:
&lt;li&gt;&lt;code&gt;defJogBkgnd&lt;/code&gt; - background&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defJogIndicator&lt;/code&gt; - indicator clip&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defJogIncr&lt;/code&gt; - Increment button (increments by 1 unit)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defJogDecr&lt;/code&gt; - Decrement button (decrements by 1 unit)&lt;/li&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class also has one property that developers can set in the component property panel,
&lt;code&gt;indLinkID&lt;/code&gt;, that replaces the default indicator graphic with a movie clip from
the Library specified by the linkage ID supplied.  The movie clip must have its center at
the center of rotation, so if the developer simply wants to change the indicator (notch), then the
indicator should be placed in the topmost (pointing up) position at the edge of the background.  When
a linkage ID is given, the component scales the background graphic to the maximum dimension of the indicator
movie clip, so the hit area (determined by the background) is correct.  Usually, the developer will
want to turn off the background graphic (using the property in the component property panel).&lt;/p&gt;
&lt;p&gt;The class has one event, by default called "onValChg" (but this can
be changed in the property inspector, or by changing the &lt;code&gt;vChg&lt;/code&gt; property), and
the value is the increment that
the jog was moved.  The &lt;code&gt;drawTicks&lt;/code&gt; property, if true, tells the component
to draw &lt;code&gt;numTicks&lt;/code&gt; ticks.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The position of the jog indicator can be set using the &lt;code&gt;val&lt;/code&gt; property.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;This class inherits from &lt;code&gt;FMXISBase&lt;/code&gt; to get listener capabilities.&lt;/p&gt;</description>
          <commentTags>
            <commentTag name="summary">&lt;p&gt;This class implements a simple jog.</commentTag>
            <commentTag name="class">FMXISJog</commentTag>
            <commentTag name="codehint">_jog</commentTag>
            <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
            <commentTag name="tooltip">Jog knob</commentTag>
          </commentTags>
        </metaTag>
      </metaTags>
      <properties>
        <property name="units" type="Number" fullType="Number" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Num of units in 1 revolution" defaultValue="12" />
          </metaTags>
        </property>
        <property name="discreteSteps" type="" fullType="" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Boolean" name="Discrete steps" defaultValue="false" />
          </metaTags>
        </property>
        <property name="className" type="String" fullType="String" readable="true" writable="true" isField="true" />
        <property name="snap2Int" type="Boolean" fullType="Boolean" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Boolean" name="Snap to integer?" defaultValue="false" />
          </metaTags>
        </property>
        <property name="numTicks" type="" fullType="" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Num of tick marks" defaultValue="12" />
          </metaTags>
        </property>
        <property name="JogEvent" type="" fullType="" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="vChg" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="onValChg method name" defaultValue="onValChg" />
          </metaTags>
        </property>
        <property name="symbolOwner" type="Object" fullType="Object" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="val" type="Number" fullType="Number" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Starting position" defaultValue="0" />
          </metaTags>
        </property>
        <property name="clickSnd" type="" fullType="" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="Linkage ID of audio click" defaultValue="" />
          </metaTags>
        </property>
        <property name="symbolName" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="showButs" type="" fullType="" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Boolean" name="Show incr/decr buttons" defaultValue="false" />
          </metaTags>
        </property>
        <property name="showTicks" type="" fullType="" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Boolean" name="Show tick marks" defaultValue="false" />
          </metaTags>
        </property>
      </properties>
      <inheritedProperties>
        <properties fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <property name="addEventListener" />
          <property name="removeEventListener" />
          <property name="clipParameters" />
        </properties>
      </inheritedProperties>
      <methods>
        <method name="incrJog" type="Void" fullType="Void">
          <description>Increase the jog by 1 unit.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Increase the jog by 1 unit.</commentTag>
            <commentTag name="method">incrJog</commentTag>
          </commentTags>
          <params />
        </method>
        <method name="incrVal" type="" fullType="">
          <description>Increments the jog by incr units (positive or negative).  This can be used to simulate turning the jog.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Increments the jog by incr units (positive or negative).</commentTag>
            <commentTag name="method">incrVal</commentTag>
            <commentTag name="param" ref="incr">Numeric increment to change the jog.</commentTag>
            <commentTag name="param" ref="quietly">(optional) Set this to true to make the change without generating an event.</commentTag>
            <commentTag name="example">myJog.incrVal(2.5);</commentTag>
          </commentTags>
          <params>
            <param name="incr" type="" fullType="" />
            <param name="q" type="" fullType="" />
          </params>
        </method>
        <method name="execEvent" type="Void" fullType="Void">
          <description>Given an event string and value that matches what this component would generate, perform the action.
For the jog component, the event is onValChg and the value is the increment.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Given an event string and value that matches what this component would generate, perform the action.</commentTag>
            <commentTag name="method">execEvent</commentTag>
            <commentTag name="param" ref="evName">Event name (string) must match the event this component generates</commentTag>
            <commentTag name="param" ref="evVal">(optional) value accompanying the event (if the event has an accompanying value)</commentTag>
            <commentTag name="param" ref="quiet">(optional) set this to true if component should perform the action but not generate an event (this should be false or undefined, unless you know what you are doing)</commentTag>
            <commentTag name="example">myJog.execEvent("onValChg", 1); // increments jog by 1 unit</commentTag>
          </commentTags>
          <params>
            <param name="evName" type="String" fullType="String" />
            <param name="evVal" type="" fullType="" />
            <param name="q" type="Boolean" fullType="Boolean" />
          </params>
        </method>
        <method name="decrJog" type="Void" fullType="Void">
          <description>Decrease the jog by 1 unit.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Decrease the jog by 1 unit.</commentTag>
            <commentTag name="method">decrJog</commentTag>
          </commentTags>
          <params />
        </method>
      </methods>
      <inheritedMethods>
        <methods fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <method name="init" />
          <method name="addListener" />
          <method name="removeListener" />
        </methods>
      </inheritedMethods>
      <events>
        <event name="onValChg">
          <description>Event generated when jog knob value has changed.</description>
          <commentTags>
            <commentTag name="summary">Event generated when jog knob value has changed.</commentTag>
            <commentTag name="event">onValChg</commentTag>
          </commentTags>
        </event>
      </events>
      <inheritedEvents />
      <inheritedStyles />
    </class>
    <class name="FMXISStopwatch" package="mx.fmxis" fullName="mx.fmxis.FMXISStopwatch" extends="mx.fmxis.FMXISBase" src="C:\Documents and Settings\All Users\Documents\Toreador\fmxis\as files\FMXISStopwatch.as">
      <description>Event generated at a user-controllable interval while the stopwatch is running.</description>
      <commentTags>
        <commentTag name="summary">Event generated at a user-controllable interval while the stopwatch is running.</commentTag>
        <commentTag name="event">onPulse</commentTag>
      </commentTags>
      <metaTags>
        <metaTag metaTagName="IconFile">
          <unnamedValues>
            <unnamedValue>stopwatch.png</unnamedValue>
          </unnamedValues>
          <description>&lt;p&gt;This class implements a stopwatch that can be started, paused, and reset.
It does not subclass timer, it just uses a timer object.  The &lt;code&gt;res&lt;/code&gt; property
is the resolution of the stopwatch (minimum value for checking if time has elapsed).  When you
need to optimize performance, you should adjust &lt;code&gt;res&lt;/code&gt; to a resolution that is about half of
the shortest interval you need to measure.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class has one event, by default called "SWPulse" (but this can
be changed in the component parameter panel, or programmatically with &lt;code&gt;setSWMsg()&lt;/code&gt;).&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;This class inherits from FISBase to get listener capabilities.&lt;/p&gt;</description>
          <commentTags>
            <commentTag name="summary">&lt;p&gt;This class implements a stopwatch that can be started, paused, and reset.</commentTag>
            <commentTag name="class">FISStopwatch</commentTag>
            <commentTag name="codehint">_stopwatch</commentTag>
            <commentTag name="author">Jonathan Kaye</commentTag>
            <commentTag name="tooltip">Stopwatch</commentTag>
          </commentTags>
        </metaTag>
      </metaTags>
      <properties>
        <property name="swEvents" type="Array" fullType="Array" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="symbolOwner" type="Object" fullType="Object" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="className" type="String" fullType="String" readable="true" writable="true" isField="true" />
        <property name="pulseInt" type="" fullType="" readable="true" writable="true" isField="false">
          <description>This property indicates the interval at which to generate pulse events when the stopwatch is active.
Use -1 to mean don't generate pulses at all.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">This property indicates the interval at which to generate pulse events when the stopwatch is active.</commentTag>
            <commentTag name="property">pulseInt</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" name="Pulse interval" />
          </metaTags>
        </property>
        <property name="symbolName" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
      </properties>
      <inheritedProperties>
        <properties fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <property name="addEventListener" />
          <property name="removeEventListener" />
          <property name="clipParameters" />
        </properties>
      </inheritedProperties>
      <methods>
        <method name="getTime" type="Number" fullType="Number">
          <description>Retrieve the current time of the stopwatch.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Retrieve the current time of the stopwatch.</commentTag>
            <commentTag name="method">getTime</commentTag>
          </commentTags>
          <params />
        </method>
        <method name="reset" type="" fullType="">
          <description>Reset the stopwatch.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Reset the stopwatch.</commentTag>
            <commentTag name="method">reset</commentTag>
          </commentTags>
          <params />
        </method>
        <method name="start" type="" fullType="">
          <description>Activate the stopwatch.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Activate the stopwatch.</commentTag>
            <commentTag name="method">start</commentTag>
          </commentTags>
          <params />
        </method>
        <method name="pause" type="" fullType="">
          <description>Pause the stopwatch.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Pause the stopwatch.</commentTag>
            <commentTag name="method">pause</commentTag>
          </commentTags>
          <params />
        </method>
        <method name="isActive" type="" fullType="">
          <description>Use this method to determine if the stopwatch is currently running (returns true) or stopped (false).</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Use this method to determine if the stopwatch is currently running (returns true) or stopped (false).</commentTag>
            <commentTag name="method">isActive</commentTag>
            <commentTag name="return">true or false, depending on whether the stopwatch is running or not (respectively).</commentTag>
          </commentTags>
          <params />
        </method>
      </methods>
      <inheritedMethods>
        <methods fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <method name="init" />
          <method name="addListener" />
          <method name="removeListener" />
        </methods>
      </inheritedMethods>
      <events>
        <event name="onPulse" />
      </events>
      <inheritedEvents />
      <inheritedStyles />
    </class>
    <class name="FMXISLamp" package="mx.fmxis" fullName="mx.fmxis.FMXISLamp" extends="mx.fmxis.FMXISBase" src="C:\Documents and Settings\All Users\Documents\Toreador\fmxis\as files\FMXISLamp.as">
      <description>&lt;p&gt;This class implements a simple three state lamp (indicator).  Users can change the
appearance by changing the &lt;i&gt;defLampGraphic&lt;/i&gt; and &lt;i&gt;defLampBkgnd&lt;/i&gt; movie clips
in the Library.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class generates no events, but it inherits from FMXISBase for consistency with the component
library.&lt;/p&gt;</description>
      <commentTags>
        <commentTag name="summary">&lt;p&gt;This class implements a simple three state lamp (indicator).</commentTag>
        <commentTag name="class">FMXISLamp</commentTag>
        <commentTag name="codehint">_lamp</commentTag>
        <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
        <commentTag name="tooltip">Simple multi-state lamp</commentTag>
      </commentTags>
      <metaTags>
        <metaTag metaTagName="InspectableList">
          <unnamedValues>
            <unnamedValue>tint1</unnamedValue>
            <unnamedValue>tint2</unnamedValue>
            <unnamedValue>displayLamp</unnamedValue>
          </unnamedValues>
          <description>&lt;p&gt;This class implements a simple three state lamp (indicator).  Users can change the
appearance by changing the &lt;i&gt;defLampGraphic&lt;/i&gt; and &lt;i&gt;defLampBkgnd&lt;/i&gt; movie clips
in the Library.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class generates no events, but it inherits from FMXISBase for consistency with the component
library.&lt;/p&gt;</description>
          <commentTags>
            <commentTag name="summary">&lt;p&gt;This class implements a simple three state lamp (indicator).</commentTag>
            <commentTag name="class">FMXISLamp</commentTag>
            <commentTag name="codehint">_lamp</commentTag>
            <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
            <commentTag name="tooltip">Simple multi-state lamp</commentTag>
          </commentTags>
        </metaTag>
        <metaTag metaTagName="IconFile">
          <unnamedValues>
            <unnamedValue>lamp.png</unnamedValue>
          </unnamedValues>
        </metaTag>
      </metaTags>
      <properties>
        <property name="symbolOwner" type="Object" fullType="Object" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="tint2" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Color value (RGB) for the second color's tint.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Color value (RGB) for the second color's tint.</commentTag>
            <commentTag name="property">tint2</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Color" name="Tint for color 2" defaultValue="#00FF00" />
          </metaTags>
        </property>
        <property name="tint1" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Color value (RGB) for the first color's tint.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Color value (RGB) for the first color's tint.</commentTag>
            <commentTag name="property">tint1</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Color" name="Tint for color 1" defaultValue="#FF0000" />
          </metaTags>
        </property>
        <property name="displayLamp" type="String" fullType="String" readable="true" writable="true" isField="false">
          <description>Three possible values: "off", "color1", or "color2".  This property can be set at
any time to control which lamp color is displayed.  When the lamp is off, it only displays
the lamp background graphic.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Three possible values: "off", "color1", or "color2".</commentTag>
            <commentTag name="property">displayLamp</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" enumeration="off,color1,color2&quot;&quot;off" type="List" name="Begin displaying which" />
          </metaTags>
        </property>
        <property name="className" type="String" fullType="String" readable="true" writable="true" isField="true" />
        <property name="symbolName" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
      </properties>
      <inheritedProperties>
        <properties fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <property name="addEventListener" />
          <property name="removeEventListener" />
          <property name="clipParameters" />
        </properties>
      </inheritedProperties>
      <methods />
      <inheritedMethods>
        <methods fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <method name="init" />
          <method name="addListener" />
          <method name="removeListener" />
        </methods>
      </inheritedMethods>
      <inheritedEvents />
      <inheritedStyles />
    </class>
    <class name="FMXISTimer" package="mx.fmxis" fullName="mx.fmxis.FMXISTimer" extends="mx.fmxis.FMXISBase" src="C:\Documents and Settings\All Users\Documents\Toreador\fmxis\as files\FMXISTimer.as">
      <description>Event generated when interval elapses.  Value supplied with the event is the number of
remaining iterations until shutdown (-1 is infinite).</description>
      <commentTags>
        <commentTag name="summary">Event generated when interval elapses.</commentTag>
        <commentTag name="event">onElapsed</commentTag>
      </commentTags>
      <metaTags>
        <metaTag metaTagName="IconFile">
          <unnamedValues>
            <unnamedValue>timer.png</unnamedValue>
          </unnamedValues>
          <description>&lt;p&gt;This class implements a countdown timer.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class has one event, by default called "onElapsed" (but this can
be changed in the property inspector).  The value is the number of
remaining iterations until shut down (-1 is infinite).&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;This class inherits from FMXISBase to get listener capabilities.&lt;/p&gt;</description>
          <commentTags>
            <commentTag name="summary">&lt;p&gt;This class implements a countdown timer.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class has one event, by default called "onElapsed" (but this can
be changed in the property inspector).</commentTag>
            <commentTag name="class">FMXISTimer</commentTag>
            <commentTag name="codehint">_timer</commentTag>
            <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
            <commentTag name="tooltip">Countdown timer</commentTag>
          </commentTags>
        </metaTag>
      </metaTags>
      <properties>
        <property name="nIters" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Set this value to change the number of times the timer repeats the interval. If changed
while the timer is active, the timer resets and starts again.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Set this value to change the number of times the timer repeats the interval.</commentTag>
            <commentTag name="property">nIters</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" name="iterations" />
          </metaTags>
        </property>
        <property name="symbolOwner" type="Object" fullType="Object" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="intvl" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Set this value to change the timing interval. If changed while the timer is active,
the timer resets and starts again.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Set this value to change the timing interval.</commentTag>
            <commentTag name="property">intvl</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" name="Timing interval" />
          </metaTags>
        </property>
        <property name="className" type="String" fullType="String" readable="true" writable="true" isField="true" />
        <property name="buttonEvents" type="Array" fullType="Array" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="symbolName" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
      </properties>
      <inheritedProperties>
        <properties fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <property name="addEventListener" />
          <property name="removeEventListener" />
          <property name="clipParameters" />
        </properties>
      </inheritedProperties>
      <methods>
        <method name="reset" type="" fullType="">
          <description>Called to reset (and halt, if active) the timer.</description>
          <commentTags>
            <commentTag name="summary">Called to reset (and halt, if active) the timer.</commentTag>
            <commentTag name="method">reset</commentTag>
          </commentTags>
          <params />
        </method>
        <method name="start" type="" fullType="">
          <description>Activate the timer.  If the timer is currently active, it is reset and then started again.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Activate the timer.</commentTag>
            <commentTag name="method">start</commentTag>
          </commentTags>
          <params />
        </method>
        <method name="isActive" type="" fullType="">
          <description>This method is used to tell if the timer is currently active.</description>
          <commentTags>
            <commentTag name="summary">This method is used to tell if the timer is currently active.</commentTag>
            <commentTag name="method">isActive</commentTag>
            <commentTag name="return">True if timer is currently active, false otherwise</commentTag>
          </commentTags>
          <params />
        </method>
      </methods>
      <inheritedMethods>
        <methods fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <method name="init" />
          <method name="addListener" />
          <method name="removeListener" />
        </methods>
      </inheritedMethods>
      <events>
        <event name="onElapsed" />
      </events>
      <inheritedEvents />
      <inheritedStyles />
    </class>
    <class name="FMXISSectorDialSmooth" package="mx.fmxis" fullName="mx.fmxis.FMXISSectorDialSmooth" extends="mx.fmxis.FMXISSectorDial" src="C:\Documents and Settings\All Users\Documents\Toreador\fmxis\as files\FMXISSectorDialSmooth.as">
      <description>Event generated when the needle reaches the target value (only after target value has been
set using the &lt;code&gt;targVal&lt;/code&gt; property).</description>
      <commentTags>
        <commentTag name="summary">Event generated when the needle reaches the target value (only after target value has been
set using the &lt;code&gt;targVal&lt;/code&gt; property).</commentTag>
        <commentTag name="event">onReachTarg</commentTag>
      </commentTags>
      <metaTags>
        <metaTag metaTagName="IconFile">
          <unnamedValues>
            <unnamedValue>sdial.png</unnamedValue>
          </unnamedValues>
          <description>&lt;p&gt;This class is an extension of FMXISSectorDial that provides sector dial functionality
with a rate-limited needle (based on a user-specified needle rate).  Developers can set its
value in two ways.  First, by setting the &lt;code&gt;val&lt;/code&gt; property to have the
dial jump immediately to that value.  Second, by setting the &lt;code&gt;targVal&lt;/code&gt;
property, the dial will reach the target value based on the set needle rate (&lt;code&gt;needleRate&lt;/code&gt;).
For convenience, the gauge generates an event, &lt;code&gt;onReachTarg&lt;/code&gt; when it reaches the target value (only if
set using &lt;code&gt;targVal&lt;/code&gt;).&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;To simulate the smooth needle movement, this component updates the needle approximately every
1/20th of a second (note: because it uses Flash's &lt;code&gt;setInterval()&lt;/code&gt; this interval can be up to twice as slow if the
frame rate is set around 20 fps, due to "features" of the setInterval implementation).  Therefore,
if you have more than a few of these components on the stage, you may find that it slows down other processes.  If
you need many of these on the Stage at once, you might consider rewriting this to centralize the needle update and
need for all the timers.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;Users can change the appearance of the
hand by modifying: &lt;code&gt;defSectDialHand&lt;/code&gt;,
center of the dial by modifying: &lt;code&gt;defSectDialCenter&lt;/code&gt;,
the background graphic by modifying: &lt;code&gt;defSectDialBkgnd&lt;/code&gt;.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;Showing the dial center and background are optional.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;This class inherits from &lt;code&gt;FMXISSectorDial&lt;/code&gt; to provide the base gauge functionality.&lt;/p&gt;</description>
          <commentTags>
            <commentTag name="summary">&lt;p&gt;This class is an extension of FMXISSectorDial that provides sector dial functionality
with a rate-limited needle (based on a user-specified needle rate).</commentTag>
            <commentTag name="class">FMXISSectorDialSmooth</commentTag>
            <commentTag name="codehint">_sdialSmooth</commentTag>
            <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
            <commentTag name="tooltip">Sector dial (gauge) with rate-limited needle transition</commentTag>
          </commentTags>
        </metaTag>
      </metaTags>
      <properties>
        <property name="targVal" type="Number" fullType="Number" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
        </property>
        <property name="dialEvents" type="Array" fullType="Array" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="symbolOwner" type="Object" fullType="Object" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="val" type="Number" fullType="Number" readable="false" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
        </property>
        <property name="className" type="String" fullType="String" readable="true" writable="true" isField="true" />
        <property name="symbolName" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
      </properties>
      <inheritedProperties>
        <properties fromName="FMXISSectorDial" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISSectorDial">
          <property name="centerVis" />
          <property name="showBack" />
          <property name="left2right" />
          <property name="minVal" />
          <property name="nXScale" />
          <property name="nYScale" />
          <property name="maxAngle" />
          <property name="minAngle" />
          <property name="maxVal" />
        </properties>
        <properties fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <property name="addEventListener" />
          <property name="removeEventListener" />
          <property name="clipParameters" />
        </properties>
      </inheritedProperties>
      <methods>
        <method name="setTargVal" type="" fullType="">
          <params>
            <param name="v" type="" fullType="" />
          </params>
        </method>
      </methods>
      <inheritedMethods>
        <methods fromName="FMXISSectorDial" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISSectorDial">
          <method name="attachChildren" />
        </methods>
        <methods fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <method name="init" />
          <method name="addListener" />
          <method name="removeListener" />
        </methods>
      </inheritedMethods>
      <events>
        <event name="onTargReach" />
      </events>
      <inheritedEvents />
      <inheritedStyles />
    </class>
    <class name="FMXISPotentiometer" package="mx.fmxis" fullName="mx.fmxis.FMXISPotentiometer" extends="mx.fmxis.FMXISJog" src="C:\Documents and Settings\All Users\Documents\Toreador\fmxis\as files\FMXISPotentiometer.as">
      <description>&lt;p&gt;This class implements a simple potentiometer, which is virtually identical in functionality to
the jog knob we implemented (FMXISJog).  Developers can set the increment, number of values
in one cycle, integer vs. discrete, minimum and maximum values, and whether the jog is adjusted by clicking and dragging,
or merely moving in a circular motion (&lt;code&gt;dragOrOver&lt;/code&gt;).&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
Developers can change the appearance by modifying:
&lt;li&gt;&lt;code&gt;defPotBkgnd&lt;/code&gt; - background&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defPotIndicator&lt;/code&gt; - indicator clip&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defPotIncr&lt;/code&gt; - Increment button (increments by 1 unit)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defPotDecr&lt;/code&gt; - Decrement button (decrements by 1 unit)&lt;/li&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class also has one property that developers can set in the component property panel,
&lt;code&gt;indLinkID&lt;/code&gt;, that replaces the default indicator graphic with a movie clip from
the Library specified by the linkage ID supplied.  The movie clip must have its center at
the center of rotation, so if the developer simply wants to change the indicator (notch), then the
indicator should be placed in the topmost (pointing up) position at the edge of the background.  When
a linkage ID is given, the component scales the background graphic to the maximum dimension of the indicator
movie clip, so the hit area (determined by the background) is correct.  Usually, the developer will
want to turn off the background graphic (using the property in the component property panel).&lt;/p&gt;
&lt;p&gt;The class has one event, by default called "onValChg" (but this can
be changed in the property inspector, or by changing the &lt;code&gt;vChg&lt;/code&gt; property), and
the value is the new value of the potentiometer.  If the user does not change values, this component
still reports the current knob position.  The &lt;code&gt;drawTicks&lt;/code&gt; property, if true, tells the component
to draw &lt;code&gt;numTicks&lt;/code&gt; ticks.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The potentiometer value can be set using the &lt;code&gt;val&lt;/code&gt; property or through the &lt;code&gt;setVal()&lt;/code&gt; method.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;This class inherits from &lt;code&gt;FMXISJog&lt;/code&gt; to get most of its functionality.&lt;/p&gt;</description>
      <commentTags>
        <commentTag name="summary">&lt;p&gt;This class implements a simple potentiometer, which is virtually identical in functionality to
the jog knob we implemented (FMXISJog).</commentTag>
        <commentTag name="class">FMXISPotentiometer</commentTag>
        <commentTag name="codehint">_pot</commentTag>
        <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
        <commentTag name="tooltip">Potentiometer knob</commentTag>
      </commentTags>
      <metaTags>
        <metaTag metaTagName="IconFile">
          <unnamedValues>
            <unnamedValue>potentiometer.png</unnamedValue>
          </unnamedValues>
          <description>&lt;p&gt;This class implements a simple potentiometer, which is virtually identical in functionality to
the jog knob we implemented (FMXISJog).  Developers can set the increment, number of values
in one cycle, integer vs. discrete, minimum and maximum values, and whether the jog is adjusted by clicking and dragging,
or merely moving in a circular motion (&lt;code&gt;dragOrOver&lt;/code&gt;).&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
Developers can change the appearance by modifying:
&lt;li&gt;&lt;code&gt;defPotBkgnd&lt;/code&gt; - background&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defPotIndicator&lt;/code&gt; - indicator clip&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defPotIncr&lt;/code&gt; - Increment button (increments by 1 unit)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defPotDecr&lt;/code&gt; - Decrement button (decrements by 1 unit)&lt;/li&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class also has one property that developers can set in the component property panel,
&lt;code&gt;indLinkID&lt;/code&gt;, that replaces the default indicator graphic with a movie clip from
the Library specified by the linkage ID supplied.  The movie clip must have its center at
the center of rotation, so if the developer simply wants to change the indicator (notch), then the
indicator should be placed in the topmost (pointing up) position at the edge of the background.  When
a linkage ID is given, the component scales the background graphic to the maximum dimension of the indicator
movie clip, so the hit area (determined by the background) is correct.  Usually, the developer will
want to turn off the background graphic (using the property in the component property panel).&lt;/p&gt;
&lt;p&gt;The class has one event, by default called "onValChg" (but this can
be changed in the property inspector, or by changing the &lt;code&gt;vChg&lt;/code&gt; property), and
the value is the new value of the potentiometer.  If the user does not change values, this component
still reports the current knob position.  The &lt;code&gt;drawTicks&lt;/code&gt; property, if true, tells the component
to draw &lt;code&gt;numTicks&lt;/code&gt; ticks.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The potentiometer value can be set using the &lt;code&gt;val&lt;/code&gt; property or through the &lt;code&gt;setVal()&lt;/code&gt; method.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;This class inherits from &lt;code&gt;FMXISJog&lt;/code&gt; to get most of its functionality.&lt;/p&gt;</description>
          <commentTags>
            <commentTag name="summary">&lt;p&gt;This class implements a simple potentiometer, which is virtually identical in functionality to
the jog knob we implemented (FMXISJog).</commentTag>
            <commentTag name="class">FMXISPotentiometer</commentTag>
            <commentTag name="codehint">_pot</commentTag>
            <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
            <commentTag name="tooltip">Potentiometer knob</commentTag>
          </commentTags>
        </metaTag>
      </metaTags>
      <properties>
        <property name="minVal" type="" fullType="" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Minimum knob value" defaultValue="0" />
          </metaTags>
        </property>
        <property name="symbolOwner" type="Object" fullType="Object" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="maxVal" type="" fullType="" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Maximum knob value" defaultValue="100" />
          </metaTags>
        </property>
        <property name="className" type="String" fullType="String" readable="true" writable="true" isField="true" />
        <property name="symbolName" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
      </properties>
      <inheritedProperties>
        <properties fromName="FMXISJog" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISJog">
          <property name="units" />
          <property name="discreteSteps" />
          <property name="snap2Int" />
          <property name="numTicks" />
          <property name="JogEvent" />
          <property name="vChg" />
          <property name="val" />
          <property name="clickSnd" />
          <property name="showButs" />
          <property name="showTicks" />
        </properties>
        <properties fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <property name="addEventListener" />
          <property name="removeEventListener" />
          <property name="clipParameters" />
        </properties>
      </inheritedProperties>
      <methods>
        <method name="execEvent" type="" fullType="">
          <description>Given an event string and value that matches what this component would generate, perform the action.
For the potentiometer component, the event is onValChg and the value is the new value.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Given an event string and value that matches what this component would generate, perform the action.</commentTag>
            <commentTag name="method">execEvent</commentTag>
            <commentTag name="param" ref="evName">Event name (string) must match the event this component generates</commentTag>
            <commentTag name="param" ref="evVal">(optional) value accompanying the event (if the event has an accompanying value)</commentTag>
            <commentTag name="param" ref="quiet">(optional) set this to true if component should perform the action but not generate an event (this should be false or undefined, unless you know what you are doing)</commentTag>
            <commentTag name="example">myPot.execEvent("onValChg", 1); // set the potentiometer to 1</commentTag>
          </commentTags>
          <params>
            <param name="evName" type="" fullType="" />
            <param name="evVal" type="" fullType="" />
            <param name="q" type="" fullType="" />
          </params>
        </method>
        <method name="setVal" type="" fullType="">
          <description>Sets the potentiometer value.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Sets the potentiometer value.</commentTag>
            <commentTag name="method">setVal</commentTag>
            <commentTag name="param" ref="v">Numeric value (between 0 and &lt;code&gt;units&lt;/code&gt;)</commentTag>
            <commentTag name="param" ref="q">(optional) Boolean flag indicating whether to set the value quietly (no event notification) or with notification (default).  You can also use the &lt;code&gt;val&lt;/code&gt; property to set the value, but it does not generate an event.</commentTag>
            <commentTag name="example">myPot.setVal(5); // sets the knob to 5</commentTag>
          </commentTags>
          <params>
            <param name="v" type="" fullType="" />
            <param name="q" type="" fullType="" />
          </params>
        </method>
      </methods>
      <inheritedMethods>
        <methods fromName="FMXISJog" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISJog">
          <method name="incrJog" />
          <method name="incrVal" />
          <method name="decrJog" />
        </methods>
        <methods fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <method name="init" />
          <method name="addListener" />
          <method name="removeListener" />
        </methods>
      </inheritedMethods>
      <inheritedEvents>
        <events fromName="FMXISJog" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISJog">
          <event name="onValChg" />
        </events>
      </inheritedEvents>
      <inheritedStyles />
    </class>
    <class name="FMXISBarrelDial" package="mx.fmxis" fullName="mx.fmxis.FMXISBarrelDial" extends="mx.fmxis.FMXISBase" src="C:\Documents and Settings\All Users\Documents\Toreador\fmxis\as files\FMXISBarrelDial.as">
      <description>This class implements a simple barrel dial that displays
positive integer values.  The values can increase by rolling the display
upwards or downwards (depending on parameter set in the component parameter panel).
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class has one event, "onOverflow", indicating the current value has exceeded
the maximum value of the display.  The value is passed as the value of the event.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;Users can change the appearance by modifying:&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;li&gt;&lt;code&gt;defBDialBkgnd&lt;/code&gt; - background for digit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defBDialDigGfx&lt;/code&gt; - clip with digits used&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defBDialDigPlusBkgnd&lt;/code&gt; - movie clip that contains two digits
(one in regular space for digit, one above) &amp;amp; background&lt;/li&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;This class inherits from FMXISBase to get listener capabilities.&lt;/p&gt;</description>
      <commentTags>
        <commentTag name="summary">This class implements a simple barrel dial that displays
positive integer values.</commentTag>
        <commentTag name="class">FMXISBarrelDial</commentTag>
        <commentTag name="codehint">_bDial</commentTag>
        <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
        <commentTag name="tooltip">Simple roll-up or roll-down barrel down</commentTag>
      </commentTags>
      <properties>
        <property name="showBkgnd" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Whether or not to display the background graphic.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Whether or not to display the background graphic.</commentTag>
            <commentTag name="property">showBkgnd</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Boolean" name="Show background" defaultValue="true" />
          </metaTags>
        </property>
        <property name="dialEvents" type="Array" fullType="Array" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="symbolOwner" type="Object" fullType="Object" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="rollUp" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Whether the dial increases by rolling up (true) or down (false).</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Whether the dial increases by rolling up (true) or down (false).</commentTag>
            <commentTag name="property">rollUp</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Boolean" name="Increase by rolling up" defaultValue="true" />
          </metaTags>
        </property>
        <property name="digTint" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Color of each digit.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Color of each digit.</commentTag>
            <commentTag name="property">digTint</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Color" name="Digit color" defaultValue="#000000" />
          </metaTags>
        </property>
        <property name="numDigs" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Number of digits.  This can be set only in the component property panel.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Number of digits.</commentTag>
            <commentTag name="property">numDigs</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Number of digits" defaultValue="1" />
          </metaTags>
        </property>
        <property name="display" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Whether or not to display the digit value.  This is used to simulate the
display on (true) or off (false).</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Whether or not to display the digit value.</commentTag>
            <commentTag name="property">display</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Boolean" name="Display on" defaultValue="true" />
          </metaTags>
        </property>
        <property name="className" type="String" fullType="String" readable="true" writable="true" isField="true" />
        <property name="evtOverflow" type="String" fullType="String" readable="true" writable="true" isField="true">
          <description>Event name for event generated if the value of the display (whole number) exceeds the
number of positions.  Unlike the digital display, the barrel
dial does not handle negative numbers.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Event name for event generated if the value of the display (whole number) exceeds the
number of positions.</commentTag>
            <commentTag name="property">evtOverflow</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="onOverflow method name" defaultValue="onOverflow" />
          </metaTags>
        </property>
        <property name="val" type="" fullType="" readable="true" writable="true" isField="false">
          <description>A getter/setter property used to set or retrieve the value of the dial.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">A getter/setter property used to set or retrieve the value of the dial.</commentTag>
            <commentTag name="property">val</commentTag>
            <commentTag name="example">// set the barrel display to 3-2, in which rightmost digit (2) is half way between 2 and 3.
myBDial.val = 32.5;</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Starting value" defaultValue="0" />
          </metaTags>
        </property>
        <property name="symbolName" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
      </properties>
      <inheritedProperties>
        <properties fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <property name="addEventListener" />
          <property name="removeEventListener" />
          <property name="clipParameters" />
        </properties>
      </inheritedProperties>
      <methods>
        <method name="setColor" type="" fullType="">
          <description>Sets the tint color of the digits to the given color.</description>
          <commentTags>
            <commentTag name="summary">Sets the tint color of the digits to the given color.</commentTag>
            <commentTag name="method">setColor</commentTag>
            <commentTag name="param" ref="RGBColor">RGB value (typically hexadecimal values for Red, Green, and Blue)</commentTag>
            <commentTag name="example">myBDial.setColor(0xFF0000); // sets digits to pure red</commentTag>
          </commentTags>
          <params>
            <param name="c" type="" fullType="" />
          </params>
        </method>
      </methods>
      <inheritedMethods>
        <methods fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <method name="init" />
          <method name="addListener" />
          <method name="removeListener" />
        </methods>
      </inheritedMethods>
      <events>
        <event name="onOverflow">
          <description>This component generates an event named "onOverflow" (can be changed programmatically or through the
component parameter panel) when the barrel dial exceeds its maximum value.  Note: underflow
(i.e., a value below 0) is not caught in this implementation.</description>
          <commentTags>
            <commentTag name="summary">This component generates an event named "onOverflow" (can be changed programmatically or through the
component parameter panel) when the barrel dial exceeds its maximum value.</commentTag>
            <commentTag name="event">onOverflow</commentTag>
          </commentTags>
        </event>
      </events>
      <inheritedEvents />
      <inheritedStyles />
    </class>
    <class name="FMXISRoundDialSmooth" package="mx.fmxis" fullName="mx.fmxis.FMXISRoundDialSmooth" extends="mx.fmxis.FMXISRoundDial" src="C:\Documents and Settings\All Users\Documents\Toreador\fmxis\as files\FMXISRoundDialSmooth.as">
      <description>Event generated when the needle reaches the target value (only after target value has been
set using the &lt;code&gt;targVal&lt;/code&gt; property).</description>
      <commentTags>
        <commentTag name="summary">Event generated when the needle reaches the target value (only after target value has been
set using the &lt;code&gt;targVal&lt;/code&gt; property).</commentTag>
        <commentTag name="event">onReachTarg</commentTag>
      </commentTags>
      <metaTags>
        <metaTag metaTagName="IconFile">
          <unnamedValues>
            <unnamedValue>rdial.png</unnamedValue>
          </unnamedValues>
          <description>&lt;p&gt;This class is an extension of FMXISRoundDial that provides round dial functionality
with a rate-limited needle (based on a user-specified needle rate).  Developers can set its
value in two ways.  First, by setting the &lt;code&gt;val&lt;/code&gt; property to have the
dial jump immediately to that value.  Second, by setting the &lt;code&gt;targVal&lt;/code&gt;
property, the dial will reach the target value based on the set needle rate (&lt;code&gt;needleRate&lt;/code&gt;).
For convenience, the gauge generates an event, &lt;code&gt;onReachTarg&lt;/code&gt; when it reaches the target value (only if
set using &lt;code&gt;targVal&lt;/code&gt;).&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;To simulate the smooth needle movement, this component updates the needle approximately every
1/20th of a second (note: because it uses Flash's &lt;code&gt;setInterval()&lt;/code&gt; this interval can be up to twice as slow if the
frame rate is set around 20 fps, due to "features" of the setInterval implementation).  Therefore,
if you have more than a few of these components on the stage, you may find that it slows down other processes.  If
you need many of these on the Stage at once, you might consider rewriting this to centralize the needle update and
need for all the timers.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;Users can change the appearance of the
hand by modifying: &lt;code&gt;defRndDialHand&lt;/code&gt;,
center of the dial by modifying: &lt;code&gt;defRndDialCenter&lt;/code&gt;,
the background graphic by modifying: &lt;code&gt;defRndDialBkgnd&lt;/code&gt;.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;Showing the dial center and background are optional.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;This class inherits from &lt;code&gt;FMXISRoundDial&lt;/code&gt; to provide the base gauge functionality.&lt;/p&gt;</description>
          <commentTags>
            <commentTag name="summary">&lt;p&gt;This class is an extension of FMXISRoundDial that provides round dial functionality
with a rate-limited needle (based on a user-specified needle rate).</commentTag>
            <commentTag name="class">FMXISRoundDialSmooth</commentTag>
            <commentTag name="codehint">_rdialSmooth</commentTag>
            <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
            <commentTag name="tooltip">Round dial (gauge) with rate-limited needle transition</commentTag>
          </commentTags>
        </metaTag>
      </metaTags>
      <properties>
        <property name="targVal" type="Number" fullType="Number" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
        </property>
        <property name="dialEvents" type="Array" fullType="Array" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="symbolOwner" type="Object" fullType="Object" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="val" type="Number" fullType="Number" readable="false" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
        </property>
        <property name="className" type="String" fullType="String" readable="true" writable="true" isField="true" />
        <property name="symbolName" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
      </properties>
      <inheritedProperties>
        <properties fromName="FMXISRoundDial" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISRoundDial">
          <property name="nXScale" />
          <property name="showBack" />
          <property name="centerVis" />
          <property name="nYScale" />
        </properties>
        <properties fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <property name="addEventListener" />
          <property name="removeEventListener" />
          <property name="clipParameters" />
        </properties>
      </inheritedProperties>
      <methods>
        <method name="setTargVal" type="" fullType="">
          <params>
            <param name="v" type="" fullType="" />
          </params>
        </method>
      </methods>
      <inheritedMethods>
        <methods fromName="FMXISRoundDial" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISRoundDial">
          <method name="setNumUnits" />
          <method name="attachChildren" />
        </methods>
        <methods fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <method name="init" />
          <method name="addListener" />
          <method name="removeListener" />
        </methods>
      </inheritedMethods>
      <events>
        <event name="onTargReach" />
      </events>
      <inheritedEvents />
      <inheritedStyles />
    </class>
    <class name="FMXISAlphaNum" package="mx.fmxis" fullName="mx.fmxis.FMXISAlphaNum" extends="mx.fmxis.FMXISDigits" src="C:\Documents and Settings\All Users\Documents\Toreador\fmxis\as files\FMXISAlphaNum.as">
      <description>Event generated when numeric value or alphanumeric string is larger than what can fit in the display
(for numbers, to
the left of the decimal point). For numbers, negative numbers consume one digit to represent the negative sign.</description>
      <commentTags>
        <commentTag name="summary">Event generated when numeric value or alphanumeric string is larger than what can fit in the display
(for numbers, to
the left of the decimal point).</commentTag>
        <commentTag name="event">onOverflow</commentTag>
      </commentTags>
      <metaTags>
        <metaTag metaTagName="IconFile">
          <unnamedValues>
            <unnamedValue>alphanum.png</unnamedValue>
          </unnamedValues>
          <description>&lt;p&gt;This class extends the digital display (&lt;code&gt;FMXISDigs&lt;/code&gt;) to allow display of
alphanumeric characters as well.  It functions in two modes: first, if the
value is numeric, it does the same as &lt;code&gt;FMXISDigs&lt;/code&gt;.  Second, if the value
is a string, it outputs it using alphanumeric characters.  It also adds the option to
left justify the alphanumeric string.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;All English letters are represented, but few non-alphanumeric characters are given.  To extend
this component with other character sets, or with characters not provided, open and modify the &lt;code&gt;defDigXGfx&lt;/code&gt;
movie clip.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;Users can change the appearance by modifying:&lt;/p&gt;
&lt;li&gt;&lt;code&gt;defDigXBkgnd&lt;/code&gt; - background&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defDigXGfx&lt;/code&gt; - clip with alphanumeric characters used&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defDigPlusBkgnd&lt;/code&gt; - movie clip that contains chars, background, and decimal point&lt;/li&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class has one event -- "onOverflow", indicating value has overflowed
the display.  This occurs on positive and negative values that do not
fit in the display window, as well as strings that don't fit.
The value is returned in the event's value.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;This class inherits from FMXISDigs.&lt;/p&gt;</description>
          <commentTags>
            <commentTag name="summary">&lt;p&gt;This class extends the digital display (&lt;code&gt;FMXISDigs&lt;/code&gt;) to allow display of
alphanumeric characters as well.</commentTag>
            <commentTag name="class">FMXISAlphaNum</commentTag>
            <commentTag name="codehint">_alphaNum</commentTag>
            <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
            <commentTag name="tooltip">Simple alphanumeric digital display</commentTag>
          </commentTags>
        </metaTag>
      </metaTags>
      <properties>
        <property name="numDigs" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Number of characters.  This can be set only in the component property panel.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Number of characters.</commentTag>
            <commentTag name="property">numDigs</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Number of characters" defaultValue="1" />
          </metaTags>
        </property>
        <property name="val" type="" fullType="" readable="true" writable="true" isField="false">
          <description>A getter/setter property used to set and retrieve the display's value.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">A getter/setter property used to set and retrieve the display's value.</commentTag>
            <commentTag name="property">val</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="Starting value" defaultValue="0" />
          </metaTags>
        </property>
        <property name="symbolOwner" type="Object" fullType="Object" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="leftJust" type="" fullType="" readable="true" writable="true" isField="false">
          <description>If true, the alphanumeric string is left justified, otherwise (default) it is right justified. Note:
this only affects strings, not numbers.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">If true, the alphanumeric string is left justified, otherwise (default) it is right justified.</commentTag>
            <commentTag name="property">leftJust</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Boolean" name="Left justify" defaultValue="true" />
          </metaTags>
        </property>
        <property name="className" type="String" fullType="String" readable="true" writable="true" isField="true" />
        <property name="symbolName" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
      </properties>
      <inheritedProperties>
        <properties fromName="FMXISDigits" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISDigits">
          <property name="showBkgnd" />
          <property name="leadZero" />
          <property name="decPl" />
          <property name="digTint" />
          <property name="display" />
          <property name="digEvents" />
          <property name="evtOverflow" />
        </properties>
        <properties fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <property name="addEventListener" />
          <property name="removeEventListener" />
          <property name="clipParameters" />
        </properties>
      </inheritedProperties>
      <methods />
      <inheritedMethods>
        <methods fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <method name="init" />
          <method name="addListener" />
          <method name="removeListener" />
        </methods>
      </inheritedMethods>
      <inheritedEvents>
        <events fromName="FMXISDigits" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISDigits">
          <event name="onOverflow" />
        </events>
      </inheritedEvents>
      <inheritedStyles />
    </class>
    <class name="FMXISBarNonUnif" package="mx.fmxis" fullName="mx.fmxis.FMXISBarNonUnif" extends="mx.fmxis.FMXISBar" src="C:\Documents and Settings\All Users\Documents\Toreador\fmxis\as files\FMXISBarNonUnif.as">
      <metaTags>
        <metaTag metaTagName="IconFile">
          <unnamedValues>
            <unnamedValue>bar.png</unnamedValue>
          </unnamedValues>
        </metaTag>
        <metaTag metaTagName="InspectableList">
          <unnamedValues>
            <unnamedValue>nBars</unnamedValue>
            <unnamedValue>barSpace</unnamedValue>
            <unnamedValue>barColors</unnamedValue>
            <unnamedValue>barColorRange</unnamedValue>
            <unnamedValue>chipUnits</unnamedValue>
            <unnamedValue>val</unnamedValue>
          </unnamedValues>
        </metaTag>
      </metaTags>
      <properties>
        <property name="chipUnits" type="" fullType="" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Array" name="Chip Units" defaultValue="10,20,30,40,50,60,70,80,90,100" />
          </metaTags>
        </property>
        <property name="symbolName" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="symbolOwner" type="Object" fullType="Object" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="className" type="String" fullType="String" readable="true" writable="true" isField="true" />
      </properties>
      <inheritedProperties>
        <properties fromName="FMXISBar" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBar">
          <property name="minVal" />
          <property name="maxVal" />
          <property name="val" />
          <property name="barColorRange" />
          <property name="barColors" />
          <property name="barSpace" />
          <property name="nBars" />
        </properties>
        <properties fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <property name="addEventListener" />
          <property name="removeEventListener" />
          <property name="clipParameters" />
        </properties>
      </inheritedProperties>
      <methods />
      <inheritedMethods>
        <methods fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <method name="init" />
          <method name="addListener" />
          <method name="removeListener" />
        </methods>
      </inheritedMethods>
      <inheritedEvents />
      <inheritedStyles />
    </class>
    <class name="FMXISSectorDial" package="mx.fmxis" fullName="mx.fmxis.FMXISSectorDial" extends="mx.fmxis.FMXISBase" src="C:\Documents and Settings\All Users\Documents\Toreador\fmxis\as files\FMXISSectorDial.as">
      <description>&lt;p&gt;This class implements a simple sector dial. Developers can set its
value by setting the &lt;code&gt;val&lt;/code&gt; property to have the
dial jump immediately to that value.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;Users can change the appearance of the
hand by modifying: &lt;code&gt;defSectDialHand&lt;/code&gt;,
center of the dial by modifying: &lt;code&gt;defSectDialCenter&lt;/code&gt;,
the background graphic by modifying: &lt;code&gt;defSectDialBkgnd&lt;/code&gt;.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The component also provides properties to bring in attached graphics based
on movie clip linkage ID's.  This allows the developer to have multiple instances
on the Stage with different looks.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;Showing the dial center and background are optional.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;This class inherits from &lt;code&gt;FMXISBase&lt;/code&gt; for consistency with other
components, but it doesn't need listener capabilities (its subclass,
FISSectorDialSmooth does, however)&lt;/p&gt;</description>
      <commentTags>
        <commentTag name="summary">&lt;p&gt;This class implements a simple sector dial.</commentTag>
        <commentTag name="class">FISSectDial</commentTag>
        <commentTag name="codehint">_sdial</commentTag>
        <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
        <commentTag name="tooltip">Simple sector dial (gauge)</commentTag>
      </commentTags>
      <metaTags>
        <metaTag metaTagName="InspectableList">
          <unnamedValues>
            <unnamedValue>units</unnamedValue>
            <unnamedValue>showBack</unnamedValue>
            <unnamedValue>centerVis</unnamedValue>
            <unnamedValue>nXScale</unnamedValue>
            <unnamedValue>nYScale</unnamedValue>
            <unnamedValue>val</unnamedValue>
            <unnamedValue>bkgndLinkID</unnamedValue>
            <unnamedValue>centerLinkID</unnamedValue>
            <unnamedValue>needleLinkID</unnamedValue>
            <unnamedValue>minAngle</unnamedValue>
            <unnamedValue>maxAngle</unnamedValue>
            <unnamedValue>minVal</unnamedValue>
            <unnamedValue>maxVal</unnamedValue>
            <unnamedValue>left2right</unnamedValue>
          </unnamedValues>
          <description>&lt;p&gt;This class implements a simple sector dial. Developers can set its
value by setting the &lt;code&gt;val&lt;/code&gt; property to have the
dial jump immediately to that value.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;Users can change the appearance of the
hand by modifying: &lt;code&gt;defSectDialHand&lt;/code&gt;,
center of the dial by modifying: &lt;code&gt;defSectDialCenter&lt;/code&gt;,
the background graphic by modifying: &lt;code&gt;defSectDialBkgnd&lt;/code&gt;.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The component also provides properties to bring in attached graphics based
on movie clip linkage ID's.  This allows the developer to have multiple instances
on the Stage with different looks.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;Showing the dial center and background are optional.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;This class inherits from &lt;code&gt;FMXISBase&lt;/code&gt; for consistency with other
components, but it doesn't need listener capabilities (its subclass,
FISSectorDialSmooth does, however)&lt;/p&gt;</description>
          <commentTags>
            <commentTag name="summary">&lt;p&gt;This class implements a simple sector dial.</commentTag>
            <commentTag name="class">FISSectDial</commentTag>
            <commentTag name="codehint">_sdial</commentTag>
            <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
            <commentTag name="tooltip">Simple sector dial (gauge)</commentTag>
          </commentTags>
        </metaTag>
        <metaTag metaTagName="IconFile">
          <unnamedValues>
            <unnamedValue>sdial.png</unnamedValue>
          </unnamedValues>
        </metaTag>
      </metaTags>
      <properties>
        <property name="centerVis" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Boolean property indicating whether the center graphic is visible (true) or not (false).</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Boolean property indicating whether the center graphic is visible (true) or not (false).</commentTag>
            <commentTag name="property">centerVis</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Boolean" name="Display center graphic" defaultValue="true" />
          </metaTags>
        </property>
        <property name="showBack" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Boolean property indicating whether the background graphic is visible (true) or not (false).</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Boolean property indicating whether the background graphic is visible (true) or not (false).</commentTag>
            <commentTag name="property">showBack</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Boolean" name="Display background graphic" defaultValue="true" />
          </metaTags>
        </property>
        <property name="symbolOwner" type="Object" fullType="Object" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="left2right" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Determines whether minimum is on the left (left2right == true) or on the right (left2right == false).</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Determines whether minimum is on the left (left2right == true) or on the right (left2right == false).</commentTag>
            <commentTag name="property">left2right</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Boolean" name="Increase values left to right" defaultValue="true" />
          </metaTags>
        </property>
        <property name="minVal" type="Number" fullType="Number" readable="true" writable="true" isField="false">
          <description>Minimum value of the gauge.  Set this property to change the minimum at any time.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Minimum value of the gauge.</commentTag>
            <commentTag name="property">minVal</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Minimum dial value" defaultValue="0" />
          </metaTags>
        </property>
        <property name="nXScale" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Scaling factor along the y axis (height) for the needle.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Scaling factor along the y axis (height) for the needle.</commentTag>
            <commentTag name="property">nYScale</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Needle horizontal scaling %" defaultValue="100" />
          </metaTags>
        </property>
        <property name="className" type="String" fullType="String" readable="true" writable="true" isField="true" />
        <property name="nYScale" type="" fullType="" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Needle vertical scaling %" defaultValue="100" />
          </metaTags>
        </property>
        <property name="maxAngle" type="Number" fullType="Number" readable="true" writable="true" isField="false">
          <description>Angle of needle when reaches maximum value.  Set this property to change the maximum at any time.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Angle of needle when reaches maximum value.</commentTag>
            <commentTag name="property">maxAngle</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Needle angle at maximum" defaultValue="45" />
          </metaTags>
        </property>
        <property name="minAngle" type="Number" fullType="Number" readable="true" writable="true" isField="false">
          <description>Angle of needle when reaches minimum value.  Set this property to change the minimum at any time.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Angle of needle when reaches minimum value.</commentTag>
            <commentTag name="property">minAngle</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Needle angle at minimum" defaultValue="-45" />
          </metaTags>
        </property>
        <property name="val" type="Number" fullType="Number" readable="true" writable="true" isField="false">
          <description>Current value of the dial (where needle is set).  Set this property to change the displayed
value immediately.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Current value of the dial (where needle is set).</commentTag>
            <commentTag name="property">val</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Starting value" defaultValue="0" />
          </metaTags>
        </property>
        <property name="maxVal" type="Number" fullType="Number" readable="true" writable="true" isField="false">
          <description>Maximum value of the gauge.  Set this property to change the maximum at any time.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Maximum value of the gauge.</commentTag>
            <commentTag name="property">maxVal</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Maximum dial value" defaultValue="100" />
          </metaTags>
        </property>
        <property name="symbolName" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
      </properties>
      <inheritedProperties>
        <properties fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <property name="addEventListener" />
          <property name="removeEventListener" />
          <property name="clipParameters" />
        </properties>
      </inheritedProperties>
      <methods>
        <method name="attachChildren" type="" fullType="">
          <params />
        </method>
      </methods>
      <inheritedMethods>
        <methods fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <method name="init" />
          <method name="addListener" />
          <method name="removeListener" />
        </methods>
      </inheritedMethods>
      <inheritedEvents />
      <inheritedStyles />
    </class>
    <class name="FMXISButtonMomentary" package="mx.fmxis" fullName="mx.fmxis.FMXISButtonMomentary" extends="mx.fmxis.FMXISButtonRepeater" src="C:\Documents and Settings\All Users\Documents\Toreador\fmxis\as files\FMXISButtonMomentary.as">
      <description>&lt;p&gt;This class extends FMXISButtonRepeater (momentary button with repeat-on-down functionality)
to allow developers to swap out the button graphics dynamically, based on specified linkage ID's
of the graphics.  Users can change the
appearance by changing the &lt;i&gt;defaultButUp&lt;/i&gt; and &lt;i&gt;defaultButDn&lt;/i&gt; movie clips
in the Library.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class has six events, by default called:&lt;/p&gt;
&lt;li&gt;&lt;code&gt;onPress&lt;/code&gt; - Generated when button first pressed, and repeated at specified frequency&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onRelease&lt;/code&gt; - Generated when button released&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onReleaseOutside&lt;/code&gt; - Generated when button released outside confines of the hit area&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onRollOver&lt;/code&gt; - Generated when cursor rolls over button hit area&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onRollOut&lt;/code&gt; - Generated when cursor rolls out of button hit area&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onDragOut&lt;/code&gt; - Generated when cursor rolls out of button hit area while left mouse button down&lt;/li&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The event names can be changed (if desired) in the component property inspector or on initialization through
the &lt;code&gt;initObject&lt;/code&gt; of &lt;code&gt;attachMovie()&lt;/code&gt;.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;This class inherits from FMXISButtonRepeater to get basic button capabilities.&lt;/p&gt;</description>
      <commentTags>
        <commentTag name="summary">&lt;p&gt;This class extends FMXISButtonRepeater (momentary button with repeat-on-down functionality)
to allow developers to swap out the button graphics dynamically, based on specified linkage ID's
of the graphics.</commentTag>
        <commentTag name="class">FMXISButtonMomentary</commentTag>
        <commentTag name="codehint">_bRepAttach</commentTag>
        <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
        <commentTag name="tooltip">Simple momentary button with repeat-on-down event and attached graphics</commentTag>
      </commentTags>
      <metaTags>
        <metaTag metaTagName="IconFile">
          <unnamedValues>
            <unnamedValue>buttonMomentary.png</unnamedValue>
          </unnamedValues>
          <description>&lt;p&gt;This class extends FMXISButtonRepeater (momentary button with repeat-on-down functionality)
to allow developers to swap out the button graphics dynamically, based on specified linkage ID's
of the graphics.  Users can change the
appearance by changing the &lt;i&gt;defaultButUp&lt;/i&gt; and &lt;i&gt;defaultButDn&lt;/i&gt; movie clips
in the Library.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class has six events, by default called:&lt;/p&gt;
&lt;li&gt;&lt;code&gt;onPress&lt;/code&gt; - Generated when button first pressed, and repeated at specified frequency&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onRelease&lt;/code&gt; - Generated when button released&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onReleaseOutside&lt;/code&gt; - Generated when button released outside confines of the hit area&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onRollOver&lt;/code&gt; - Generated when cursor rolls over button hit area&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onRollOut&lt;/code&gt; - Generated when cursor rolls out of button hit area&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onDragOut&lt;/code&gt; - Generated when cursor rolls out of button hit area while left mouse button down&lt;/li&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The event names can be changed (if desired) in the component property inspector or on initialization through
the &lt;code&gt;initObject&lt;/code&gt; of &lt;code&gt;attachMovie()&lt;/code&gt;.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;This class inherits from FMXISButtonRepeater to get basic button capabilities.&lt;/p&gt;</description>
          <commentTags>
            <commentTag name="summary">&lt;p&gt;This class extends FMXISButtonRepeater (momentary button with repeat-on-down functionality)
to allow developers to swap out the button graphics dynamically, based on specified linkage ID's
of the graphics.</commentTag>
            <commentTag name="class">FMXISButtonMomentary</commentTag>
            <commentTag name="codehint">_bRepAttach</commentTag>
            <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
            <commentTag name="tooltip">Simple momentary button with repeat-on-down event and attached graphics</commentTag>
          </commentTags>
        </metaTag>
      </metaTags>
      <properties>
        <property name="symbolOwner" type="Object" fullType="Object" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="UpLinkID" type="String" fullType="String" readable="true" writable="true" isField="false">
          <description>Allows the developer at initialization or at run-time to change the up position visual for the button.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Allows the developer at initialization or at run-time to change the up position visual for the button.</commentTag>
            <commentTag name="property">UpLinkID</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="Linkage ID of Up Tile" defaultValue="" />
          </metaTags>
        </property>
        <property name="className" type="String" fullType="String" readable="true" writable="true" isField="true" />
        <property name="DownLinkID" type="String" fullType="String" readable="true" writable="true" isField="false">
          <description>Allows the developer at initialization or at run-time to change the down (depressed) position visual for the button.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Allows the developer at initialization or at run-time to change the down (depressed) position visual for the button.</commentTag>
            <commentTag name="property">DownLinkID</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="Linkage ID of Down Tile" defaultValue="" />
          </metaTags>
        </property>
        <property name="symbolName" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
      </properties>
      <inheritedProperties>
        <properties fromName="FMXISButtonRepeater" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISButtonRepeater">
          <property name="clipParameters" />
        </properties>
        <properties fromName="FMXISButton" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISButton">
          <property name="showHand" />
          <property name="evtReleaseOutside" />
          <property name="buttonEvents" />
          <property name="evtRelease" />
          <property name="evtRollOver" />
          <property name="evtPress" />
          <property name="evtRollOut" />
          <property name="evtDragOut" />
        </properties>
        <properties fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <property name="addEventListener" />
          <property name="removeEventListener" />
        </properties>
      </inheritedProperties>
      <methods>
        <method name="setDownTile" type="" fullType="">
          <params>
            <param name="id" type="" fullType="" />
          </params>
        </method>
        <method name="setUpTile" type="" fullType="">
          <params>
            <param name="id" type="" fullType="" />
          </params>
        </method>
      </methods>
      <inheritedMethods>
        <methods fromName="FMXISButton" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISButton">
          <method name="execEvent" />
          <method name="onRollOver" />
          <method name="onRollOut" />
          <method name="onReleaseOutside" />
          <method name="onDragOut" />
          <method name="onRelease" />
          <method name="onPress" />
        </methods>
        <methods fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <method name="init" />
          <method name="addListener" />
          <method name="removeListener" />
        </methods>
      </inheritedMethods>
      <inheritedEvents>
        <events fromName="FMXISButton" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISButton">
          <event name="onReleaseOutside" />
          <event name="onRelease" />
          <event name="onRollOver" />
          <event name="onDragOut" />
          <event name="onRollOut" />
          <event name="onPress" />
        </events>
      </inheritedEvents>
      <inheritedStyles />
    </class>
    <class name="FMXISProxyListener" package="mx.fmxis" fullName="mx.fmxis.FMXISProxyListener" extends="Object" src="C:\Documents and Settings\All Users\Documents\Toreador\fmxis\as files\FMXISProxyListener.as">
      <description>This class is used to hold a listener instance when
the component FMXISBase needs to evaluate the listener
at event notification time, rather than at compile-time.</description>
      <commentTags>
        <commentTag name="summary">This class is used to hold a listener instance when
the component FMXISBase needs to evaluate the listener
at event notification time, rather than at compile-time.</commentTag>
        <commentTag name="class">FMXISProxyListener</commentTag>
        <commentTag name="package">mx.fmxis</commentTag>
        <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
      </commentTags>
      <properties>
        <property name="tline" type="MovieClip" fullType="MovieClip" readable="true" writable="true" isField="true">
          <description>Holds the MovieClip instance of the timeline on which the listener is supposed to reside.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Holds the MovieClip instance of the timeline on which the listener is supposed to reside.</commentTag>
            <commentTag name="property" />
          </commentTags>
        </property>
        <property name="lstner" type="String" fullType="String" readable="true" writable="true" isField="true">
          <description>Holds the string name of the listener.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Holds the string name of the listener.</commentTag>
            <commentTag name="property" />
          </commentTags>
        </property>
      </properties>
      <methods>
        <method name="handleEvent" type="" fullType="">
          <params>
            <param name="ev" type="" fullType="" />
          </params>
        </method>
      </methods>
    </class>
    <class name="FMXISRoundDial" package="mx.fmxis" fullName="mx.fmxis.FMXISRoundDial" extends="mx.fmxis.FMXISBase" src="C:\Documents and Settings\All Users\Documents\Toreador\fmxis\as files\FMXISRoundDial.as">
      <description>&lt;p&gt;This class implements a simple round dial gauge.  Developers can set its
value by setting the &lt;code&gt;val&lt;/code&gt; property to have the
dial jump immediately to that value.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;Users can change the appearance of the
hand by modifying: &lt;code&gt;defRndDialHand&lt;/code&gt;,
center of the dial by modifying: &lt;code&gt;defRndDialCenter&lt;/code&gt;,
the background graphic by modifying: &lt;code&gt;defRndDialBkgnd&lt;/code&gt;.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The component also provides properties to bring in attached graphics based
on movie clip linkage ID's.  This allows the developer to have multiple instances
on the Stage with different looks.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;Showing the dial center and background are optional.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;This class inherits from &lt;code&gt;FMXISBase&lt;/code&gt; for consistency with other
components, but it doesn't need listener capabilities (its subclass,
FISRoundDialSmooth does, however)&lt;/p&gt;</description>
      <commentTags>
        <commentTag name="summary">&lt;p&gt;This class implements a simple round dial gauge.</commentTag>
        <commentTag name="class">FMXISRoundDial</commentTag>
        <commentTag name="codehint">_rdial</commentTag>
        <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
        <commentTag name="tooltip">Round dial (gauge)</commentTag>
      </commentTags>
      <metaTags>
        <metaTag metaTagName="InspectableList">
          <unnamedValues>
            <unnamedValue>units</unnamedValue>
            <unnamedValue>showBack</unnamedValue>
            <unnamedValue>centerVis</unnamedValue>
            <unnamedValue>nXScale</unnamedValue>
            <unnamedValue>nYScale</unnamedValue>
            <unnamedValue>val</unnamedValue>
            <unnamedValue>bkgndLinkID</unnamedValue>
            <unnamedValue>centerLinkID</unnamedValue>
            <unnamedValue>needleLinkID</unnamedValue>
          </unnamedValues>
          <description>&lt;p&gt;This class implements a simple round dial gauge.  Developers can set its
value by setting the &lt;code&gt;val&lt;/code&gt; property to have the
dial jump immediately to that value.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;Users can change the appearance of the
hand by modifying: &lt;code&gt;defRndDialHand&lt;/code&gt;,
center of the dial by modifying: &lt;code&gt;defRndDialCenter&lt;/code&gt;,
the background graphic by modifying: &lt;code&gt;defRndDialBkgnd&lt;/code&gt;.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The component also provides properties to bring in attached graphics based
on movie clip linkage ID's.  This allows the developer to have multiple instances
on the Stage with different looks.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;Showing the dial center and background are optional.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;This class inherits from &lt;code&gt;FMXISBase&lt;/code&gt; for consistency with other
components, but it doesn't need listener capabilities (its subclass,
FISRoundDialSmooth does, however)&lt;/p&gt;</description>
          <commentTags>
            <commentTag name="summary">&lt;p&gt;This class implements a simple round dial gauge.</commentTag>
            <commentTag name="class">FMXISRoundDial</commentTag>
            <commentTag name="codehint">_rdial</commentTag>
            <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
            <commentTag name="tooltip">Round dial (gauge)</commentTag>
          </commentTags>
        </metaTag>
        <metaTag metaTagName="IconFile">
          <unnamedValues>
            <unnamedValue>rdial.png</unnamedValue>
          </unnamedValues>
        </metaTag>
      </metaTags>
      <properties>
        <property name="nXScale" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Scaling factor along the y axis (height) for the needle.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Scaling factor along the y axis (height) for the needle.</commentTag>
            <commentTag name="property">nYScale</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Needle horizontal scaling %" defaultValue="100" />
          </metaTags>
        </property>
        <property name="showBack" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Boolean property indicating whether the background graphic is visible (true) or not (false).</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Boolean property indicating whether the background graphic is visible (true) or not (false).</commentTag>
            <commentTag name="property">showBack</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Boolean" name="Display background graphic" defaultValue="true" />
          </metaTags>
        </property>
        <property name="symbolOwner" type="Object" fullType="Object" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="centerVis" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Boolean property indicating whether the center graphic is visible (true) or not (false).</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Boolean property indicating whether the center graphic is visible (true) or not (false).</commentTag>
            <commentTag name="property">centerVis</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Boolean" name="Display center graphic" defaultValue="true" />
          </metaTags>
        </property>
        <property name="className" type="String" fullType="String" readable="true" writable="true" isField="true" />
        <property name="nYScale" type="" fullType="" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Needle vertical scaling %" defaultValue="100" />
          </metaTags>
        </property>
        <property name="val" type="Number" fullType="Number" readable="true" writable="true" isField="false">
          <description>Current value of the dial (where needle is set).  Set this property to change the displayed
value immediately.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Current value of the dial (where needle is set).</commentTag>
            <commentTag name="property">val</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Starting value" defaultValue="0" />
          </metaTags>
        </property>
        <property name="symbolName" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
      </properties>
      <inheritedProperties>
        <properties fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <property name="addEventListener" />
          <property name="removeEventListener" />
          <property name="clipParameters" />
        </properties>
      </inheritedProperties>
      <methods>
        <method name="setNumUnits" type="" fullType="">
          <description>Sets the number of units in a full cycle</description>
          <commentTags>
            <commentTag name="summary">Sets the number of units in a full cycle</commentTag>
            <commentTag name="method">setNumUnits</commentTag>
            <commentTag name="param" ref="v">Number of units</commentTag>
          </commentTags>
          <params>
            <param name="nu" type="" fullType="" />
          </params>
        </method>
        <method name="attachChildren" type="" fullType="">
          <params />
        </method>
      </methods>
      <inheritedMethods>
        <methods fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <method name="init" />
          <method name="addListener" />
          <method name="removeListener" />
        </methods>
      </inheritedMethods>
      <inheritedEvents />
      <inheritedStyles />
    </class>
    <class name="FMXISJoystick" package="mx.fmxis" fullName="mx.fmxis.FMXISJoystick" extends="mx.fmxis.FMXISBase" src="C:\Documents and Settings\All Users\Documents\Toreador\fmxis\as files\FMXISJoystick.as">
      <description>Event generated when the joystick has returned to the center position.</description>
      <commentTags>
        <commentTag name="summary">Event generated when the joystick has returned to the center position.</commentTag>
        <commentTag name="event">onJReturned</commentTag>
      </commentTags>
      <metaTags>
        <metaTag metaTagName="IconFile">
          <unnamedValues>
            <unnamedValue>joystick.png</unnamedValue>
          </unnamedValues>
          <description>&lt;p&gt;This class implements a continuous-valued joystick.  The joystick x,y values range from
&lt;code&gt;-maxVal&lt;/code&gt; to &lt;code&gt;maxVal&lt;/code&gt;, with 0 being the center.  The graphics should be set such that
hot spot is in the topmost position and the stick is fully extended upwards.  The
joystick uses these pixel values to compute its possible range.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The routines allow the user to move the hot spot and the stick is rotated to the proper
angle and scaled, from 0 (at center pos) to its fully extended position at
&lt;code&gt;maxVal&lt;/code&gt; (which the user can set).  Whenever the joystick is not in the center
position, it generates an event (pulse), at a given frequency.  A property, &lt;code&gt;forceInt&lt;/code&gt;, says whether
to report the value as a floating point number or rounded integer.  The default event
message is "onJChg".  When the user releases the joystick and it has returned to the center position, it generates a second
event, by default, "onJReturned" (in addition to the &lt;code&gt;onJChg&lt;/code&gt; event with coordinates
[0, 0]).  Note that if the user does not release the joystick and passes over (0, 0), then the
onJChg event is generated by not onJReturned.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The joystick snaps back to the center when it released, and a coefficient says
how quickly this happens.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The joystick can be controlled using the mouse or programmatically.  To use the mouse,
the user drags the hotspot.  To use it programmatically, the caller invokes &lt;code&gt;moveHS&lt;/code&gt;
with a single argument (non-undefined), then uses &lt;code&gt;setVec()&lt;/code&gt; to set the vector, and
when done, uses &lt;code&gt;stopMoveHS&lt;/code&gt; to release the joystick.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;You can change the graphics by modifying the following clips:&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;li&gt;&lt;code&gt;defJStkBase&lt;/code&gt; - background graphic for the joystick&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defJStkHotSpot&lt;/code&gt; - handle (hot spot) for the joystick&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defJStkStick&lt;/code&gt; - stick of the joystick&lt;/li&gt;
&lt;/p&gt;&lt;p&gt;
This class inherits from FMXISBase to get listener capabilities.</description>
          <commentTags>
            <commentTag name="summary">&lt;p&gt;This class implements a continuous-valued joystick.</commentTag>
            <commentTag name="class">FMXISJoystick</commentTag>
            <commentTag name="codehint">_joystick</commentTag>
            <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
            <commentTag name="tooltip">Simple joystick</commentTag>
          </commentTags>
        </metaTag>
      </metaTags>
      <properties>
        <property name="_pulseID" type="Number" fullType="Number" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="public" />
          </attributes>
        </property>
        <property name="symbolOwner" type="Object" fullType="Object" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="maxVal" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Maximum value for the vector coordinates when the joystick is at full extension.  The
joystick center is always 0 (for both x and y coordinates), and this property sets
the maximum value for the coordinate.  The maximum is used to set positive and negative
extent, so joystick range will be (-maxVal,-maxVal) to (maxVal, maxVal).</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Maximum value for the vector coordinates when the joystick is at full extension.</commentTag>
            <commentTag name="property">maxVal</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Max value" defaultValue="100" />
          </metaTags>
        </property>
        <property name="className" type="String" fullType="String" readable="true" writable="true" isField="true" />
        <property name="jstickEvents" type="Array" fullType="Array" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="evtJReturned" type="String" fullType="String" readable="true" writable="true" isField="true">
          <description>The event name for the joystick "returned to center" event.  This event is
generated when the joystick has been released by the user and it has returned to the center position (0, 0).</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">The event name for the joystick "returned to center" event.</commentTag>
            <commentTag name="property">evtJReturned</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="onJReturned method name" defaultValue="onJReturned" />
          </metaTags>
        </property>
        <property name="forceInt" type="Boolean" fullType="Boolean" readable="true" writable="true" isField="true">
          <description>Whether or not the vector values generated in joystick events should be rounded to integers.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Whether or not the vector values generated in joystick events should be rounded to integers.</commentTag>
            <commentTag name="property">forceInt</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Boolean" name="Force values to integer" defaultValue="true" />
          </metaTags>
        </property>
        <property name="centerEPS" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Any value less than this is considered zero.  This is used so the person
doesn't have to hit 0 exactly.  Usually about 5-10% of &lt;code&gt;maxVal&lt;/code&gt;.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Any value less than this is considered zero.</commentTag>
            <commentTag name="property">centerEPS</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Center allowance" defaultValue="2" />
          </metaTags>
        </property>
        <property name="kSticky" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Coefficient (between 0 and 1, inclusive) that determines how slowly the joystick
returns to center once released.  0 is instantaneous, 1 means the joystick remains
in the position left when the joystick was released (ultimate stickiness!).</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Coefficient (between 0 and 1, inclusive) that determines how slowly the joystick
returns to center once released.</commentTag>
            <commentTag name="property">kSticky</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" name="Stickiness" />
          </metaTags>
        </property>
        <property name="evtJReleased" type="String" fullType="String" readable="true" writable="true" isField="true">
          <description>The event name for the event generated when the user releases the joystick.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">The event name for the event generated when the user releases the joystick.</commentTag>
            <commentTag name="property">evtJReleased</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="evtJReleased method name" defaultValue="evtJReleased" />
          </metaTags>
        </property>
        <property name="stickID" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="Stick linkage ID" defaultValue="" />
          </metaTags>
        </property>
        <property name="evtJPulse" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="onJPulse method name" defaultValue="onJPulse" />
          </metaTags>
        </property>
        <property name="baseID" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="Base linkage ID" defaultValue="" />
          </metaTags>
        </property>
        <property name="showHand" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Boolean property indicating whether or not to display the hand cursor when the cursor is
over the hit area of this component.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Boolean property indicating whether or not to display the hand cursor when the cursor is
over the hit area of this component.</commentTag>
            <commentTag name="property">showHand</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Boolean" name="Show Hand Cursor" defaultValue="true" />
          </metaTags>
        </property>
        <property name="evtJStart" type="String" fullType="String" readable="true" writable="true" isField="true">
          <description>The event name for the joystick "begin movement".  This event is
generated when the joystick has been engaged.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">The event name for the joystick "begin movement".</commentTag>
            <commentTag name="property">evtJStart</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="onJStart method name" defaultValue="onJStart" />
          </metaTags>
        </property>
        <property name="_pulseFreq" type="Number" fullType="Number" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="public" />
          </attributes>
        </property>
        <property name="evtJChg" type="String" fullType="String" readable="true" writable="true" isField="true">
          <description>The event name for the joystick value change event.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">The event name for the joystick value change event.</commentTag>
            <commentTag name="property">evtJChg</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="onJChg method name" defaultValue="onJChg" />
          </metaTags>
        </property>
        <property name="symbolName" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="hsID" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="Hot spot linkage ID" defaultValue="" />
          </metaTags>
        </property>
        <property name="pulseFreq" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Frequency of events generated when the joystick is away from center position.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Frequency of events generated when the joystick is away from center position.</commentTag>
            <commentTag name="property">pulseFreq</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" name="Event pulse frequency" />
          </metaTags>
        </property>
      </properties>
      <inheritedProperties>
        <properties fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <property name="addEventListener" />
          <property name="removeEventListener" />
          <property name="clipParameters" />
        </properties>
      </inheritedProperties>
      <methods>
        <method name="getVec" type="" fullType="">
          <description>Returns the vector position of the joystick, in an object with x and y properties.  Note that
the object is reused for subsequent calls to &lt;code&gt;getVec()&lt;/code&gt;, so you should copy the
values if you need to store them for any reason.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Returns the vector position of the joystick, in an object with x and y properties.</commentTag>
            <commentTag name="method">getVec</commentTag>
          </commentTags>
          <params />
        </method>
        <method name="moveHS" type="" fullType="">
          <description>Initialize moving of hot spot.  Developers use this only when moving the joystick programmatically.
Use &lt;code&gt;setVec()&lt;/code&gt; to set the position, after calling &lt;code&gt;moveHS()&lt;/code&gt;, then call
&lt;code&gt;stopMoveHS&lt;/code&gt; when you are finished moving the joystick (make sure the pass the argument
as &lt;code&gt;true&lt;/code&gt;).</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Initialize moving of hot spot.</commentTag>
            <commentTag name="method">moveHS</commentTag>
            <commentTag name="param" ref="noMouse">Set this to true if you are moving the joystick programmatically.</commentTag>
            <commentTag name="param" ref="quiet">Set this to true to not generate an onJStart event</commentTag>
          </commentTags>
          <params>
            <param name="noMouse" type="" fullType="" />
            <param name="q" type="" fullType="" />
          </params>
        </method>
        <method name="execEvent" type="" fullType="">
          <description>This method is used to programmatically invoke an action of the component based on
the event passed in.  When a user invokes an action, like presses a button, the button
generates an onPress event.  This method does the opposite -- given an onPress event, this
the method visually depresses the button.  This is typically used to simulate the user invoking the action.</description>
          <commentTags>
            <commentTag name="summary">This method is used to programmatically invoke an action of the component based on
the event passed in.</commentTag>
            <commentTag name="method">execEvent</commentTag>
            <commentTag name="param" ref="evtName">Event name (string) must match the event this component generates</commentTag>
            <commentTag name="param" ref="evtVal">Event value (for joystick, this value is an object with an x and y property)</commentTag>
            <commentTag name="param" ref="quietly">Boolean true to invoke action without generating the event, false or not given at all to allow event to be generated.  This is only respected for the onJReturned event, since onJChg is triggered at the pulse interval not as a result of setting the joystick vector</commentTag>
          </commentTags>
          <params>
            <param name="evtName" type="" fullType="" />
            <param name="evtVal" type="" fullType="" />
            <param name="q" type="" fullType="" />
          </params>
        </method>
        <method name="stopMoveHS" type="" fullType="">
          <description>Stop tracking movement of the joystick.  The arg noMouse is a hook to allow the joystick to be
controlled programmatically.</description>
          <commentTags>
            <commentTag name="summary">Stop tracking movement of the joystick.</commentTag>
            <commentTag name="method">stopMoveHS</commentTag>
            <commentTag name="param" ref="noMouse">Set this to true if you are moving the joystick programmatically.</commentTag>
            <commentTag name="param" ref="quiet">Set this to true to not generate an onJReleased event</commentTag>
          </commentTags>
          <params>
            <param name="noMouse" type="" fullType="" />
            <param name="quiet" type="" fullType="" />
          </params>
        </method>
        <method name="setVec" type="" fullType="">
          <description>Sets the joystick to the given vector.  Must be preceded by call to moveHS if joystick is
being moved programmatically.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Sets the joystick to the given vector.</commentTag>
            <commentTag name="method">setVec</commentTag>
            <commentTag name="param" ref="x">x-coordinate position (&lt;code&gt;-maxVal&lt;/code&gt; to &lt;code&gt;maxVal&lt;/code&gt;)</commentTag>
            <commentTag name="param" ref="y">y-coordinate position (&lt;code&gt;-maxVal&lt;/code&gt; to &lt;code&gt;maxVal&lt;/code&gt;)</commentTag>
          </commentTags>
          <params>
            <param name="x" type="" fullType="" />
            <param name="y" type="" fullType="" />
          </params>
        </method>
      </methods>
      <inheritedMethods>
        <methods fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <method name="init" />
          <method name="addListener" />
          <method name="removeListener" />
        </methods>
      </inheritedMethods>
      <events>
        <event name="onJReturned" />
        <event name="onJReleased" />
        <event name="onJChg" />
        <event name="onJStart" />
        <event name="onJPulse" />
      </events>
      <inheritedEvents />
      <inheritedStyles />
    </class>
    <class name="FMXISButton" package="mx.fmxis" fullName="mx.fmxis.FMXISButton" extends="mx.fmxis.FMXISBase" src="C:\Documents and Settings\All Users\Documents\Toreador\fmxis\as files\FMXISButton.as">
      <description>Event generated when user moves the cursor from the button's hit area to away from the hit area while holding the left mouse button down.</description>
      <commentTags>
        <commentTag name="summary">Event generated when user moves the cursor from the button's hit area to away from the hit area while holding the left mouse button down.</commentTag>
        <commentTag name="event">onDragOut</commentTag>
      </commentTags>
      <properties>
        <property name="showHand" type="" fullType="" readable="true" writable="true" isField="false">
          <description>Boolean property indicating whether or not to display the hand cursor when the cursor is
over the hit area of this component.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Boolean property indicating whether or not to display the hand cursor when the cursor is
over the hit area of this component.</commentTag>
            <commentTag name="property">showHand</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Boolean" name="Show Hand Cursor" defaultValue="true" />
          </metaTags>
        </property>
        <property name="evtReleaseOutside" type="String" fullType="String" readable="true" writable="true" isField="true">
          <description>Event name of onReleaseOutside event. The event names should really only be set at the time the component is instantiated (either
at run-time, or programmatically at the attachMovie/createClassObject time).  However, you can
change it at any time programmatically and the component will use that event name.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Event name of onReleaseOutside event.</commentTag>
            <commentTag name="property">evtReleaseOutside</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="onReleaseOutside method name" defaultValue="onReleaseOutside" />
          </metaTags>
        </property>
        <property name="buttonEvents" type="Array" fullType="Array" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="symbolOwner" type="Object" fullType="Object" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="className" type="String" fullType="String" readable="true" writable="true" isField="true" />
        <property name="evtRelease" type="String" fullType="String" readable="true" writable="true" isField="true">
          <description>Event name of onRelease event. The event names should really only be set at the time the component is instantiated (either
at run-time, or programmatically at the attachMovie/createClassObject time).  However, you can
change it at any time programmatically and the component will use that event name.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Event name of onRelease event.</commentTag>
            <commentTag name="property">evtRelease</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="onRelease method name" defaultValue="onRelease" />
          </metaTags>
        </property>
        <property name="evtRollOver" type="String" fullType="String" readable="true" writable="true" isField="true">
          <description>Event name of onRollOver event. The event names should really only be set at the time the component is instantiated (either
at run-time, or programmatically at the attachMovie/createClassObject time).  However, you can
change it at any time programmatically and the component will use that event name.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Event name of onRollOver event.</commentTag>
            <commentTag name="property">evtRollOver</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="onRollOver method name" defaultValue="onRollOver" />
          </metaTags>
        </property>
        <property name="evtPress" type="String" fullType="String" readable="true" writable="true" isField="true">
          <description>Event name of onPress event. The event names should really only be set at the time the component is instantiated (either
at run-time, or programmatically at the attachMovie/createClassObject time).  However, you can
change it at any time programmatically and the component will use that event name.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Event name of onPress event.</commentTag>
            <commentTag name="property">evtPress</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="onPress method name" defaultValue="onPress" />
          </metaTags>
        </property>
        <property name="evtRollOut" type="String" fullType="String" readable="true" writable="true" isField="true">
          <description>Event name of onRollOut event. The event names should really only be set at the time the component is instantiated (either
at run-time, or programmatically at the attachMovie/createClassObject time).  However, you can
change it at any time programmatically and the component will use that event name.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Event name of onRollOut event.</commentTag>
            <commentTag name="property">evtRollOut</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="onRollOut method name" defaultValue="onRollOut" />
          </metaTags>
        </property>
        <property name="evtDragOut" type="String" fullType="String" readable="true" writable="true" isField="true">
          <description>Event name of onDragOut event. The event names should really only be set at the time the component is instantiated (either
at run-time, or programmatically at the attachMovie/createClassObject time).  However, you can
change it at any time programmatically and the component will use that event name.</description>
          <attributes>
            <attribute value="public" />
          </attributes>
          <commentTags>
            <commentTag name="summary">Event name of onDragOut event.</commentTag>
            <commentTag name="property">evtDragOut</commentTag>
          </commentTags>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="String" name="onDragOut method name" defaultValue="onDragOut" />
          </metaTags>
        </property>
        <property name="symbolName" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
      </properties>
      <inheritedProperties>
        <properties fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <property name="addEventListener" />
          <property name="removeEventListener" />
          <property name="clipParameters" />
        </properties>
      </inheritedProperties>
      <methods>
        <method name="execEvent" type="" fullType="">
          <description>This method is used to programmatically invoke an action of the component based on
the event passed in.  When a user invokes an action, like presses a button, the button
generates an onPress event.  This method does the opposite -- given an onPress event, this
the method visually depresses the button.  This is typically used to simulate the user invoking the action.</description>
          <commentTags>
            <commentTag name="summary">This method is used to programmatically invoke an action of the component based on
the event passed in.</commentTag>
            <commentTag name="method">execEvent</commentTag>
            <commentTag name="param" ref="evtName">Event name (string) must match the event this component generates</commentTag>
            <commentTag name="param" ref="evtVal">Event value (for button, this value is ignored)</commentTag>
            <commentTag name="param" ref="quietly">Boolean true to invoke action without generating the event, false or not given at all to allow event to be generated</commentTag>
          </commentTags>
          <params>
            <param name="evtName" type="" fullType="" />
            <param name="evtVal" type="" fullType="" />
            <param name="q" type="" fullType="" />
          </params>
        </method>
        <method name="onRollOver" type="" fullType="">
          <description>Called to invoke action of passing the cursor over the button's hit area.</description>
          <commentTags>
            <commentTag name="summary">Called to invoke action of passing the cursor over the button's hit area.</commentTag>
            <commentTag name="method">onRollOver</commentTag>
            <commentTag name="param" ref="quietly">Boolean property indicating whether or not to suppress the event generation as a
result of the action.  Defaults to false (don't suppress event).</commentTag>
          </commentTags>
          <params>
            <param name="q" type="" fullType="" />
          </params>
        </method>
        <method name="onRollOut" type="" fullType="">
          <description>Called to invoke action of passing the cursor away from the button's hit area.</description>
          <commentTags>
            <commentTag name="summary">Called to invoke action of passing the cursor away from the button's hit area.</commentTag>
            <commentTag name="method">onRollOut</commentTag>
            <commentTag name="param" ref="quietly">Boolean property indicating whether or not to suppress the event generation as a
result of the action.  Defaults to false (don't suppress event).</commentTag>
          </commentTags>
          <params>
            <param name="q" type="" fullType="" />
          </params>
        </method>
        <method name="onReleaseOutside" type="" fullType="">
          <description>Called to invoke action of releasing the button when the cursor has moved outside the hit area.</description>
          <commentTags>
            <commentTag name="summary">Called to invoke action of releasing the button when the cursor has moved outside the hit area.</commentTag>
            <commentTag name="method">onReleaseOutside</commentTag>
            <commentTag name="param" ref="quietly">Boolean property indicating whether or not to suppress the event generation as a
result of the action.  Defaults to false (don't suppress event).</commentTag>
          </commentTags>
          <params>
            <param name="q" type="" fullType="" />
          </params>
        </method>
        <method name="onDragOut" type="" fullType="">
          <description>Called to invoke action of passing passing the cursor outside the hit area while the left mouse button is down.</description>
          <commentTags>
            <commentTag name="summary">Called to invoke action of passing passing the cursor outside the hit area while the left mouse button is down.</commentTag>
            <commentTag name="method">onRollOver</commentTag>
            <commentTag name="param" ref="quietly">Boolean property indicating whether or not to suppress the event generation as a
result of the action.  Defaults to false (don't suppress event).</commentTag>
          </commentTags>
          <params>
            <param name="q" type="" fullType="" />
          </params>
        </method>
        <method name="onRelease" type="" fullType="">
          <description>Called to invoke action of releasing the button when the cursor is over the hit area.</description>
          <commentTags>
            <commentTag name="summary">Called to invoke action of releasing the button when the cursor is over the hit area.</commentTag>
            <commentTag name="method">onRelease</commentTag>
            <commentTag name="param" ref="quietly">Boolean property indicating whether or not to suppress the event generation as a
result of the action.  Defaults to false (don't suppress event).</commentTag>
          </commentTags>
          <params>
            <param name="q" type="" fullType="" />
          </params>
        </method>
        <method name="onPress" type="" fullType="">
          <description>Called to invoke action of pressing the button.</description>
          <commentTags>
            <commentTag name="summary">Called to invoke action of pressing the button.</commentTag>
            <commentTag name="method">onPress</commentTag>
            <commentTag name="param" ref="quietly">Boolean property indicating whether or not to suppress the event generation as a
result of the action.  Defaults to false (don't suppress event).</commentTag>
          </commentTags>
          <params>
            <param name="q" type="Boolean" fullType="Boolean" />
          </params>
        </method>
      </methods>
      <inheritedMethods>
        <methods fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <method name="init" />
          <method name="addListener" />
          <method name="removeListener" />
        </methods>
      </inheritedMethods>
      <events>
        <event name="onReleaseOutside" />
        <event name="onRelease" />
        <event name="onRollOver" />
        <event name="onDragOut" />
        <event name="onRollOut" />
        <event name="onPress">
          <description>&lt;p&gt;This class implements a simple momentary push button.  Users can change the
appearance by changing the &lt;i&gt;defaultButUp&lt;/i&gt; and &lt;i&gt;defaultButDn&lt;/i&gt; movie clips
in the Library.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class has six events, by default called:&lt;/p&gt;
&lt;li&gt;&lt;code&gt;onPress&lt;/code&gt; - Generated when button first pressed, and repeated at specified frequency&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onRelease&lt;/code&gt; - Generated when button released&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onReleaseOutside&lt;/code&gt; - Generated when button released outside confines of the hit area&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onRollOver&lt;/code&gt; - Generated when cursor rolls over button hit area&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onRollOut&lt;/code&gt; - Generated when cursor rolls out of button hit area&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onDragOut&lt;/code&gt; - Generated when cursor rolls out of button hit area while left mouse button down&lt;/li&gt;
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The event names can be changed (if desired) in the component property inspector or on initialization through
the &lt;code&gt;initObject&lt;/code&gt; of &lt;code&gt;attachMovie()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This class inherits from FMXISBase to get listener capabilities.&lt;/p&gt;</description>
          <commentTags>
            <commentTag name="summary">&lt;p&gt;This class implements a simple momentary push button.</commentTag>
            <commentTag name="class">FMXISButton</commentTag>
            <commentTag name="codehint">_button</commentTag>
            <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
            <commentTag name="tooltip">Simple momentary button</commentTag>
          </commentTags>
        </event>
      </events>
      <inheritedEvents />
      <inheritedStyles />
    </class>
    <class name="FMXISBar" package="mx.fmxis" fullName="mx.fmxis.FMXISBar" extends="mx.fmxis.FMXISBase" src="C:\Documents and Settings\All Users\Documents\Toreador\fmxis\as files\FMXISBar.as">
      <description>This class implements a simple bar plot.
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class generates no events, but it inherits from FMXISBase for consistency with the component
library.&lt;/p&gt;</description>
      <commentTags>
        <commentTag name="summary">This class implements a simple bar plot.</commentTag>
        <commentTag name="class">FMXISBar</commentTag>
        <commentTag name="codehint">_bar</commentTag>
        <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
        <commentTag name="tooltip">Simple bar plot</commentTag>
      </commentTags>
      <metaTags>
        <metaTag metaTagName="IconFile">
          <unnamedValues>
            <unnamedValue>bar.png</unnamedValue>
          </unnamedValues>
          <description>This class implements a simple bar plot.
&lt;/p&gt;&lt;p&gt;
&lt;p&gt;The class generates no events, but it inherits from FMXISBase for consistency with the component
library.&lt;/p&gt;</description>
          <commentTags>
            <commentTag name="summary">This class implements a simple bar plot.</commentTag>
            <commentTag name="class">FMXISBar</commentTag>
            <commentTag name="codehint">_bar</commentTag>
            <commentTag name="author">Jonathan Kaye (FlashSim.com)</commentTag>
            <commentTag name="tooltip">Simple bar plot</commentTag>
          </commentTags>
        </metaTag>
        <metaTag metaTagName="InspectableList">
          <unnamedValues>
            <unnamedValue>nBars</unnamedValue>
            <unnamedValue>barSpace</unnamedValue>
            <unnamedValue>barColors</unnamedValue>
            <unnamedValue>barColorRange</unnamedValue>
            <unnamedValue>minVal</unnamedValue>
            <unnamedValue>maxVal</unnamedValue>
            <unnamedValue>val</unnamedValue>
          </unnamedValues>
        </metaTag>
      </metaTags>
      <properties>
        <property name="symbolOwner" type="Object" fullType="Object" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
        <property name="minVal" type="" fullType="" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Minimum value" defaultValue="0" />
          </metaTags>
        </property>
        <property name="className" type="String" fullType="String" readable="true" writable="true" isField="true" />
        <property name="maxVal" type="" fullType="" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Maximum value" defaultValue="100" />
          </metaTags>
        </property>
        <property name="val" type="" fullType="" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Starting value" defaultValue="0" />
          </metaTags>
        </property>
        <property name="barColorRange" type="" fullType="" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Array" name="Bar color range" defaultValue="100" />
          </metaTags>
        </property>
        <property name="barColors" type="" fullType="" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Array" name="Bar colors" defaultValue="0x00FF00" />
          </metaTags>
        </property>
        <property name="barSpace" type="" fullType="" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Bar spacing" defaultValue="2" />
          </metaTags>
        </property>
        <property name="nBars" type="" fullType="" readable="true" writable="true" isField="false">
          <attributes>
            <attribute value="public" />
          </attributes>
          <metaTags>
            <metaTag metaTagName="Inspectable" type="Number" name="Number of bars" defaultValue="10" />
          </metaTags>
        </property>
        <property name="symbolName" type="String" fullType="String" readable="true" writable="true" isField="true">
          <attributes>
            <attribute value="static" />
          </attributes>
        </property>
      </properties>
      <inheritedProperties>
        <properties fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <property name="addEventListener" />
          <property name="removeEventListener" />
          <property name="clipParameters" />
        </properties>
      </inheritedProperties>
      <methods />
      <inheritedMethods>
        <methods fromName="FMXISBase" fromPackage="mx.fmxis" fromFullName="mx.fmxis.FMXISBase">
          <method name="init" />
          <method name="addListener" />
          <method name="removeListener" />
        </methods>
      </inheritedMethods>
      <inheritedEvents />
      <inheritedStyles />
    </class>
  </classes>
</docs>